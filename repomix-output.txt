This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-12T00:37:04.403Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  workflows/
    deploy.yml
assets/
  discord-icon.svg
  facebook-icon.svg
  github-icon.svg
  twitter-icon.svg
  x-icon.svg
components/
  common/
    layout/
      Column.jsx
      Container.jsx
      Grid.jsx
      GridItem.jsx
      index.js
      Row.jsx
      Section.jsx
      SectionDivider.jsx
      Stack.jsx
    Markdown/
      index.js
      Markdown.styles.js
      remarkAlerts.js
      remarkGithub.js
    Button.jsx
    ColorSchemeToggle.jsx
    Footer.jsx
    Header.jsx
    IconButton.jsx
    Menu.jsx
    Ribbon.jsx
    Site.jsx
    SocialSection.jsx
    Tile.jsx
    Typography.jsx
  pages/
    blog/
      post/
        AboutAuthor.jsx
        ArticleHeader.jsx
        index.js
        ShareSheet.jsx
      index.js
    dev/
      grid.js
      layout.js
      typography.js
    developer/
      index.js
    download/
      index.js
    extensions/
      index.js
    home/
      sections/
        CtaSection.jsx
        FeaturesSection.jsx
        HeroSection.jsx
        IntroFeaturesSection.jsx
        MoreFeaturesSection.jsx
        SampleStorySection.jsx
        WhyUsSection.jsx
      HardwareLockup.jsx
      HeroImage.jsx
      index.js
    legal/
      license/
        index.js
      privacy/
        index.js
      tos/
        index.js
    resources/
      index.js
    whats-new/
      index.js
      RawRelease.jsx
      Release.jsx
data/
  blog/
    demo.md
    starter-post.md
  config.json
  macOS-versions.json
  syntax-dark.js
  syntax-light.js
hooks/
  useColorScheme.js
  useMediaQuery.js
  useVisibilityProps.js
  useWindowDimensions.js
pages/
  blog/
    [...slug].js
    index.js
  dev/
    grid.js
    layout.js
    typography.js
  legal/
    license.js
    privacy.js
    tos.js
  sparkle/
    [tag].js
  whats-new/
    raw/
      [tag].js
    index.js
  _app.js
  _document.js
  developer.js
  download.js
  extensions.js
  index.js
  resources.js
public/
  favicon.svg
  sitemap.xml
  vercel.svg
scripts/
  generate-sitemap.mjs
styles/
  breakpoints.js
  getResponsivePropStyles.js
  getTypographyStyles.js
  globals.css
  spacing.js
  theme.js
utils/
  fetchData.js
  file.js
  getAllPosts.js
  getMinimumSystemVersion.js
.gitignore
jsconfig.json
next.config.js
package.json

================================================================
Files
================================================================

================
File: .github/workflows/deploy.yml
================
name: Build and Deploy Site

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (to match your local Node.js version)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.12.0' # Ensure this matches your local Node.js version

      # Step 3: Verify Node.js Version
      - name: Verify Node.js Version
        run: node --version

      # Step 4: Set up Bun
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Step 5: Install dependencies
      - name: Install dependencies
        working-directory: ./ # Adjust if your package.json is elsewhere
        run: |
          rm -rf node_modules # Clear old dependencies
          bun install

      # Step 6: Build the site
      - name: Build the site
        working-directory: ./ # Adjust if your build script is elsewhere
        run: bun run build

      # Step 7: Copy build output to docs folder
      - name: Copy build output to docs
        run: |
          mkdir -p docs # Ensure the docs folder exists
          cp -r ./.next/* ./ # Adjust 'dist' if your build output folder is different

      # Step 8: Commit changes to docs folder
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs
          git commit -m "Update docs with new build output" || echo "No changes to commit"
          git push

      # Step 9: Generate Sitemap
      - name: Generate Sitemap
        working-directory: ./
        run: NODE_OPTIONS='--experimental-json-modules' node ./scripts/generate-sitemap.mjs

================
File: assets/discord-icon.svg
================
<svg 
  fill="currentColor" 
  viewBox="0 0 50 50" 
  xmlns="http://www.w3.org/2000/svg" 
>
  <path d="M41.626,10.768C37.644,7.567,31.347,7.025,31.08,7.003c-0.42-0.036-0.819,0.202-0.992,0.587c-0.012,0.025-0.15,0.34-0.303,0.833c2.633,0.443,5.867,1.339,8.794,3.155c0.469,0.291,0.613,0.907,0.322,1.377c-0.189,0.305-0.516,0.473-0.851,0.473c-0.18,0-0.362-0.048-0.526-0.15C32.494,10.158,26.209,10,25,10s-7.495,0.158-12.523,3.278c-0.47,0.292-1.086,0.147-1.377-0.322c-0.292-0.47-0.147-1.086,0.322-1.377c2.927-1.815,6.16-2.712,8.794-3.155c-0.154-0.493-0.292-0.808-0.303-0.833c-0.173-0.386-0.571-0.629-0.993-0.587c-0.266,0.021-6.563,0.563-10.598,3.809C6.213,12.76,2,24.152,2,34c0,0.174,0.045,0.344,0.131,0.495c2.909,5.109,10.842,6.447,12.649,6.504C14.791,41,14.801,41,14.812,41c0.319,0,0.62-0.152,0.809-0.411l1.829-2.513c-4.933-1.276-7.453-3.439-7.598-3.568c-0.414-0.365-0.453-0.997-0.087-1.411c0.365-0.414,0.995-0.453,1.41-0.089C11.236,33.062,15.875,37,25,37c9.141,0,13.782-3.953,13.828-3.993c0.414-0.359,1.045-0.323,1.409,0.094c0.364,0.414,0.325,1.043-0.088,1.407c-0.146,0.129-2.666,2.292-7.599,3.568l1.829,2.513C34.568,40.848,34.869,41,35.188,41c0.011,0,0.021,0,0.031-0.001c1.809-0.057,9.741-1.395,12.649-6.504C47.955,34.344,48,34.174,48,34C48,24.152,43.787,12.76,41.626,10.768z M18.5,30c-1.933,0-3.5-1.791-3.5-4c0-2.209,1.567-4,3.5-4s3.5,1.791,3.5,4C22,28.209,20.433,30,18.5,30z M31.5,30c-1.933,0-3.5-1.791-3.5-4c0-2.209,1.567-4,3.5-4s3.5,1.791,3.5,4C35,28.209,33.433,30,31.5,30z"/>
</svg>

================
File: assets/facebook-icon.svg
================
<svg 
  fill="currentColor"
  viewBox="0 0 24 24" 
  xmlns="http://www.w3.org/2000/svg" 
>
    <path d="M12,0.956056 C5.90254713,0.956056 0.959569945,5.89903318 0.959569945,11.9964861 C0.959569945,17.1742269 4.52408319,21.5187245 9.33289707,22.7117975 L9.33289707,15.3702648 L7.05627207,15.3702648 L7.05627207,11.9964861 L9.33289707,11.9964861 L9.33289707,10.5427264 C9.33289707,6.78491729 11.0334766,5.04317904 14.7227467,5.04317904 C15.42218,5.04317904 16.6290757,5.18030119 17.1228037,5.31746749 L17.1228037,8.37584326 L16.8926452,8.35784253 C16.6290619,8.34241008 16.2690583,8.33468454 15.8473249,8.33468454 C14.0370035,8.33468454 13.337526,9.02042773 13.337526,10.8033247 L13.337526,11.9964861 L16.9437279,11.9964861 L16.3242273,15.3702648 L13.337526,15.3702648 L13.337526,22.956056 C18.8041287,22.2957941 23.0404301,17.6411488 23.0404301,11.9964861 C23.0404301,5.89903318 18.0974529,0.956056 12,0.956056 Z"></path>
</svg>

================
File: assets/github-icon.svg
================
<svg 
	fill="currentColor"
	viewBox="0 0 32 32"
	xmlns="http://www.w3.org/2000/svg" 
	preserveAspectRatio="xMidYMid meet"
>
<path d="M16,0C7.2,0,0,7.2,0,16c0,7.1,4.6,13.1,10.9,15.2c0.8,0.1,1.1-0.3,1.1-0.8c0-0.4,0-1.4,0-2.7
	c-4.5,1-5.4-2.1-5.4-2.1c-0.7-1.8-1.8-2.3-1.8-2.3c-1.5-1,0.1-1,0.1-1c1.6,0.1,2.5,1.6,2.5,1.6c1.4,2.4,3.7,1.7,4.7,1.3
	c0.1-1,0.6-1.7,1-2.1c-3.6-0.4-7.3-1.8-7.3-7.9c0-1.7,0.6-3.2,1.6-4.3c-0.2-0.4-0.7-2,0.2-4.2c0,0,1.3-0.4,4.4,1.6
	c1.3-0.4,2.6-0.5,4-0.5c1.4,0,2.7,0.2,4,0.5c3.1-2.1,4.4-1.6,4.4-1.6c0.9,2.2,0.3,3.8,0.2,4.2c1,1.1,1.6,2.5,1.6,4.3
	c0,6.1-3.7,7.5-7.3,7.9c0.6,0.5,1.1,1.5,1.1,3c0,2.1,0,3.9,0,4.4c0,0.4,0.3,0.9,1.1,0.8C27.4,29.1,32,23.1,32,16C32,7.2,24.8,0,16,0
	z" />
</svg>

================
File: assets/twitter-icon.svg
================
<svg 
  fill="currentColor"
  viewBox="0 0 24 24" 
  xmlns="http://www.w3.org/2000/svg" 
>
  <path d="M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z"></path>
</svg>

================
File: assets/x-icon.svg
================
<svg 
  fill="currentColor"
  viewBox="0 0 24 24" 
  xmlns="http://www.w3.org/2000/svg" 
>
    <path d="M18.9616794,1 L22.6404532,1 L14.5631456,10.3357934 L24,23 L16.5944685,23 L10.7964012,15.304059 L4.1586138,23 L0.479840053,23 L9.03698767,13.0147601 L0,1 L7.58947018,1 L12.8277241,8.0302583 L18.9616794,1 Z M17.8794179,21 L20,21 L6.27858628,3 L4,3 L17.8794179,21 Z"></path>
</svg>

================
File: components/common/layout/Column.jsx
================
import styled from "styled-components";
import getResponsivePropStyles from "@/styles/getResponsivePropStyles";
import getSpacing from "@/styles/spacing";

const Column = styled.div`
  box-sizing: border-box;
  flex: 0 0 auto;
  ${({ $gap }) => getResponsivePropStyles($gap, (val) => `
    padding-left: calc(${getSpacing(val)}/2);
    padding-right: calc(${getSpacing(val)}/2);
`)}
  ${({ width }) => width ? getResponsivePropStyles(width, (val) => `
    flex-basis: ${Number(val ?? 1)/12*100}%;
    max-width: ${Number(val ?? 1)/12*100}%;
  `) : `
    flex: 1;
    max-width: 100%;
  `}
  ${({ offset }) => getResponsivePropStyles(offset, (val) => `
    margin-left: ${Number(val ?? 1)/12*100}%;
  `)}
`;

export default Column;

================
File: components/common/layout/Container.jsx
================
import { mediaQueries } from '@/styles/breakpoints';
import styled from 'styled-components'

const gutter = 22;
const smallGutter = 16;

const Container = styled.div`
  margin-left: auto;
  margin-right: auto;
  max-width: ${({ $width }) => $width === 'lg' ? 1440-(gutter*2) : 980}px;
  width: calc(100% - max(${gutter}px, env(safe-area-inset-left)) - max(${gutter}px, env(safe-area-inset-right)));
  padding: 0 ${gutter}px;
  padding-left: calc(max(${gutter}px, env(safe-area-inset-left)));
  padding-right: calc(max(${gutter}px, env(safe-area-inset-right)));
  position: relative;
  @media ${mediaQueries.md} {
    margin-left: auto;
    margin-right: auto;
    width: 692px;
  }
  @media ${mediaQueries.sm} {
    max-width: 366px;
    width: calc(100% - ${smallGutter}px * 2);
    padding: 0 ${smallGutter}px;
    padding-left: calc(max(${smallGutter}px, env(safe-area-inset-left)));
    padding-right: calc(max(${smallGutter}px, env(safe-area-inset-right)));
  }
`;

export default Container;

================
File: components/common/layout/Grid.jsx
================
import styled from "styled-components";
import getResponsivePropStyles from '@/styles/getResponsivePropStyles';
import getSpacing from '../../../styles/spacing';

const Grid = styled.div`
  display: grid;
  ${({ columns }) => getResponsivePropStyles(columns, (val) => `grid-template-columns: repeat(${val}, 1fr);`)}
  ${({ rowHeight }) => getResponsivePropStyles(rowHeight, (val) => `grid-auto-rows: ${getSpacing(val)};`)}
  ${({ gap }) => getResponsivePropStyles(gap, (val) => `gap: ${getSpacing(val)};`)}
`;

export default Grid;

================
File: components/common/layout/GridItem.jsx
================
import React from "react";
import styled from "styled-components"
import getResponsivePropStyles from '@/styles/getResponsivePropStyles';
import useVisibilityProps from '../../../hooks/useVisibilityProps';

const GridItemWrap = styled.div`
  ${({ $width }) => getResponsivePropStyles($width, (val) => `grid-column-start: ${Number(val ?? 1)} span;`)}
  ${({ $height }) => getResponsivePropStyles($height, (val) => `grid-row-start: ${Number(val ?? 1)} span;`)}
  grid-row-end: auto;
  grid-column-end: auto;
`;

const GridItem = ({ children, width, height, as, ...props }) => {
  const isVisible = useVisibilityProps(props);

  return isVisible ? (
    <GridItemWrap $width={width} $height={height} as={as} {...props}>{children}</GridItemWrap>
  ) : null;
}

export default GridItem;

================
File: components/common/layout/index.js
================
export { default as Column } from './Column';
export { default as Container } from './Container';
export { default as Grid } from './Grid';
export { default as GridItem } from './GridItem';
export { default as Row } from './Row';
export { default as Section } from './Section';
export { default as SectionDivider } from './SectionDivider';
export { default as Stack } from './Stack';

================
File: components/common/layout/Row.jsx
================
import React from 'react'
import styled from "styled-components";
import getSpacing from '@/styles/spacing';
import getResponsivePropStyles from '@/styles/getResponsivePropStyles';

const RowWrap = styled.div`
  display: flex;
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  ${({ gap, gutter, gutterTop, gutterBottom }) => gap ? getResponsivePropStyles(gap, (val) => {
    const spacing = getSpacing(val);
    return `
      margin-left: calc(-${spacing}/2);
      margin-right: calc(-${spacing}/2);
      gap: ${spacing} 0;
      ${gutter || gutterTop ? `margin-top: ${spacing};` : ``}
      ${gutter || gutterBottom ? `margin-bottom: ${spacing};` : ``}
    `
  }) : `
    ${gutter || gutterTop ? `margin-top: ${getSpacing(gutterTop ?? gutter)};` : ``}
    ${gutter || gutterBottom ? `margin-bottom: ${getSpacing(gutterBottom ?? gutter)};` : ``}
  `}
  ${({ align }) => getResponsivePropStyles(
    align, 
    (val) => `
      justify-content: ${val === "center" ? `` : `flex-`}${val};
      ${val === "center" ? `text-align: center;` : ``}
      ${val === "end" ? `text-align: end;` : ``}
    `
  )}
  ${({ distribute }) => getResponsivePropStyles(
    distribute, 
    (val) => `justify-content: space-${val};`
  )}
`;

const Row = ({ children, gap, ...props }) => {
  const itemCount = React.Children.count(children);
  const childrenWithProps = React.Children.map(children, child =>
    React.cloneElement(child, { $gap: gap, $itemCount: itemCount })
  );

  return (
    <RowWrap gap={gap} {...props}>{childrenWithProps}</RowWrap>
  )
}

export default Row;

================
File: components/common/layout/Section.jsx
================
import styled from "styled-components";
import RestrictedContainer from "./Container"
import getSpacing from '@/styles/spacing';
import getResponsivePropStyles from '@/styles/getResponsivePropStyles';
import useVisibilityProps from "@/hooks/useVisibilityProps";
import { mediaQueries } from "@/styles/breakpoints";

const SectionWrap = styled.section`
  --section-accent-color: ${({ accentColor }) => `var(--${accentColor})`};
  ${({ gutter, gutterTop, gutterY }) => getResponsivePropStyles((gutterTop ?? gutterY ?? gutter ?? 8), (val) => `
    padding-top: ${getSpacing(val)};
  `)}
  ${({ gutter, gutterBottom, gutterY }) => getResponsivePropStyles((gutterBottom ?? gutterY ?? gutter ?? 8), (val) => `
    padding-bottom: ${getSpacing(val)};
  `)}
  @media ${mediaQueries.sm} {
    ${({ gutter, gutterTop, gutterY }) => getResponsivePropStyles((gutterTop ?? gutterY ?? gutter ?? 8), (val) => `
      padding-top: ${getSpacing(val/2)};
    `)}
    ${({ gutter, gutterBottom, gutterY }) => getResponsivePropStyles((gutterBottom ?? gutterY ?? gutter ?? 8), (val) => `
      padding-bottom: ${getSpacing(val/2)};
    `)}
  }
`;

const FullWidthContainer = styled.div`
  ${({ gutter, gutterLeft, gutterX }) => getResponsivePropStyles((gutterLeft ?? gutterX ?? gutter ?? 3), (val) => `
    padding-left: ${getSpacing(val)};
  `)}
  ${({ gutter, gutterRight, gutterX }) => getResponsivePropStyles((gutterRight ?? gutterX ?? gutter ?? 3), (val) => `
    padding-right: ${getSpacing(val)};
  `)}
  @media ${mediaQueries.sm} {
    ${({ gutter, gutterLeft, gutterX }) => getResponsivePropStyles((gutterLeft ?? gutterX ?? gutter ?? 3), (val) => `
      padding-left: ${getSpacing(val/2)};
    `)}
    ${({ gutter, gutterRight, gutterX }) => getResponsivePropStyles((gutterRight ?? gutterX ?? gutter ?? 3), (val) => `
      padding-right: ${getSpacing(val/2)};
    `)}
  }
`;

export default function Section (props) {
  let { children, className, contained, gutter, gutterTop, gutterBottom, gutterLeft, gutterRight, gutterX = true, gutterY, accentColor = "azure", ...rest } = props;
  const Container = contained ? RestrictedContainer : FullWidthContainer;
  const isVisible = useVisibilityProps(props);

  if (!isVisible) return null;
  
  const defaultGutterX = 3;
  const defaultGutterY = 8;

  if (gutterLeft === true) gutterLeft = defaultGutterX;
  if (gutterRight === true) gutterRight = defaultGutterX;
  if (gutterX === true) gutterX = defaultGutterX;
  if (gutter === true) gutterX = defaultGutterX;

  if (gutterLeft === false) gutterLeft = 0;
  if (gutterRight === false) gutterRight = 0;
  if (gutterX === false) gutterX = 0;
  if (gutter === false) gutterX = 0;

  if (gutterTop === true) gutterTop = defaultGutterY;
  if (gutterBottom === true) gutterBottom = defaultGutterY;
  if (gutterY === true) gutterY = defaultGutterY;
  if (gutter === true) gutterY = defaultGutterY

  if (gutterTop === false) gutterTop = 0;
  if (gutterBottom === false) gutterBottom = 0;
  if (gutterY === false) gutterY = 0;
  if (gutter === false) gutterY = 0

  return (
    <SectionWrap
      className={className}
      gutter={[gutterY, gutterX]}
      gutterTop={gutterTop}
      gutterBottom={gutterBottom}
      gutterX={gutterX}
      gutterY={gutterY}
      accentColor={accentColor}
      {...rest}
    >
      <Container gutter={gutterX} $width={contained}>
        {children}
      </Container>
    </SectionWrap>
  );
}

================
File: components/common/layout/SectionDivider.jsx
================
import Section from "./Section"
import styled from 'styled-components';

const Divider = styled.hr`
  margin: 0;
  border: 0;
  border-bottom: 1px solid var(--separator-color);
`;

const SectionDivider = (props) => {
  return (
    <Section {...props}>
      <Divider />
    </Section>
  );
}

export default SectionDivider;

================
File: components/common/layout/Stack.jsx
================
import React from "react";
import styled from "styled-components";
import spacing from "@/styles/spacing";

const StackWrap = styled.div`
  display: flex;
  flex-direction: ${({ $direction }) => ($direction === "vertical" ? `column` : `row`)}${({ $reverse }) => ($reverse ? `-reverse` : ``)};
  ${({ $gap }) =>
    $gap !== undefined && $gap !== null && $gap !== false
      ? `gap: ${Array.isArray($gap) ? spacing(...$gap) : spacing($gap)};`
      : ``}
  align-items: ${({ $align }) =>
    `${$align === "center" || $align === "stretch" || $align === "space-around" || $align === "space-between" ? `` : `flex-`}${
      $align || "start"
    }`};
  justify-content: ${({ $distribute }) =>
    `${
      $distribute === "center" || $distribute === "stretch" || $distribute === "space-around" || $distribute === "space-between"
        ? ``
        : `flex-`
    }${$distribute || "start"}`};
  ${({ $fill }) => ($fill ? `flex: 1;` : ``)}
  ${({ $wrap }) => ($wrap ? `flex-wrap: wrap;` : ``)}
  ${({ $distribute }) =>
    $distribute === "stretch"
      ? `
    & > * {
      flex: 1;
    }
  `
      : ``}

  && > hr {
    align-self: stretch;
    margin: 0;
    flex: 0;
    border: 0;
    ${({ $direction, theme }) =>
      $direction === "horizontal"
        ? `
        border-left: 1px solid var(--fill-gray-tertiary);
        width: 0;
        flex-shrink: 0;
        height: auto;
    `
        : `
        border-top: 1px solid var(--fill-gray-tertiary);
        height: 0;
    `}
  }
`;

const Divider = () => <hr />;

function divideChildren(children) {
  const childrenArray = React.Children.toArray(children).filter(Boolean);

  return childrenArray.reduce((output, child, index) => {
    output.push(child);

    if (index < childrenArray.length - 1) {
      output.push(React.cloneElement(<Divider />, { key: `divider-${index}` }));
    }

    return output;
  }, []);
}

// eslint-disable-next-line react/display-name
const Stack = React.forwardRef(({ children, className, align, distribute, direction, divide, fill, gap, reverse, wrap, style }, ref) => {
  const childrenWithDividers = divide ? divideChildren(children) : children;

  return (
    <StackWrap
      className={className}
      style={style}
      ref={ref}
      $align={align}
      $distribute={distribute}
      $direction={direction}
      $fill={fill}
      $gap={gap}
      $reverse={reverse}
      $wrap={wrap}
    >
      {childrenWithDividers}
    </StackWrap>
  );
})

Stack.defaultProps = {
  align: "stretch",
  direction: "vertical"
};

export default Stack;

================
File: components/common/Markdown/index.js
================
import { useMemo } from 'react';
import ReactMarkdown from 'react-markdown';
import rehypeRaw from 'rehype-raw';
import remarkGfm from 'remark-gfm';
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import tsx from 'react-syntax-highlighter/dist/cjs/languages/prism/tsx';
import typescript from 'react-syntax-highlighter/dist/cjs/languages/prism/typescript';
import scss from 'react-syntax-highlighter/dist/cjs/languages/prism/scss';
import bash from 'react-syntax-highlighter/dist/cjs/languages/prism/bash';
import markdown from 'react-syntax-highlighter/dist/cjs/languages/prism/markdown';
import json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';
import javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';
import jsx from 'react-syntax-highlighter/dist/cjs/languages/prism/jsx';
import swift from 'react-syntax-highlighter/dist/cjs/languages/prism/swift';

import { useSite } from '@/components/common/Site';
import darkSyntaxTheme from '@/data/syntax-dark';
import lightSyntaxTheme from '@/data/syntax-light';

import remarkAlerts from './remarkAlerts';

import * as Styled from './Markdown.styles';
import remarkGithub from './remarkGithub';

SyntaxHighlighter.registerLanguage('tsx', tsx);
SyntaxHighlighter.registerLanguage('typescript', typescript);
SyntaxHighlighter.registerLanguage('scss', scss);
SyntaxHighlighter.registerLanguage('bash', bash);
SyntaxHighlighter.registerLanguage('markdown', markdown);
SyntaxHighlighter.registerLanguage('json', json);
SyntaxHighlighter.registerLanguage('javascript', javascript);
SyntaxHighlighter.registerLanguage('js', javascript);
SyntaxHighlighter.registerLanguage('jsx', jsx);
SyntaxHighlighter.registerLanguage('swift', swift);

const Markdown = ({
  children,
  className,
  style,
  components = {},
  remarkPlugins = [],
  rehypePlugins = [],
}) => {
  const { colorScheme } = useSite();
  const syntaxTheme = useMemo(
    () => (colorScheme === 'dark' ? darkSyntaxTheme : lightSyntaxTheme),
    [colorScheme]
  );

  const CodeSandboxTransformer = {
    name: 'CodeSandbox',
    // shouldTransform can also be async
    shouldTransform(url) {
      const { host, pathname } = new URL(url);

      return (
        ['codesandbox.io', 'www.codesandbox.io'].includes(host) &&
        pathname.includes('/s/')
      );
    },
    // getHTML can also be async
    getHTML(url) {
      const iframeUrl = url.replace('/s/', '/embed/');

      return `<iframe src="${iframeUrl}" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>`;
    },
  };

  const MarkdownComponents = {
    code({ node, inline, className, ...props }) {
      const hasLang = /language-(\w+)/.exec(className || '');
      const hasMeta = node?.data?.meta;

      const applyHighlights = (applyHighlights) => {
        if (hasMeta) {
          const RE = /{([\d,-]+)}/;
          const metadata = node.data.meta?.replace(/\s/g, '');
          const strlineNumbers = RE?.test(metadata)
            ? RE?.exec(metadata)[1]
            : '0';
          const highlightLines = rangeParser(strlineNumbers);
          const highlight = highlightLines;
          const data = highlight.includes(applyHighlights) ? 'highlight' : null;
          return { data };
        } else {
          return {};
        }
      };

      return hasLang ? (
        <SyntaxHighlighter
          style={syntaxTheme}
          language={hasLang[1]}
          PreTag="div"
          className="codeblock"
          wrapLines={hasMeta}
          useInlineStyles
          lineProps={applyHighlights}
        >
          {props.children}
        </SyntaxHighlighter>
      ) : (
        <code className={className} {...props} />
      );
    },
  };

  return (
    <div>
    <Styled.MarkdownWrap className={className} style={style}>
      <ReactMarkdown
        components={{ ...MarkdownComponents, ...components }}
        remarkPlugins={[
          remarkGfm,
          remarkAlerts,
          [
            remarkGithub,
            { defaultOrg: 'plyght', defaultRepo: 'voxa' },
          ],
          // [remarkEmbedder, { transformers: [CodeSandboxTransformer] }],
          ...remarkPlugins,
        ]}
        rehypePlugins={[rehypeRaw, ...rehypePlugins]}
      >
        {children}
      </ReactMarkdown>
    </Styled.MarkdownWrap>
    </div>
  );
};

export default Markdown;

================
File: components/common/Markdown/Markdown.styles.js
================
import styled from 'styled-components';

// Utility classes
// - wide
// - full-width
// - centered
// - aspect-ratio-[1:1|5:4|4:3|7:5|3:2|16:9|2:1|5:2|3:1] (and reverse)

export const MarkdownWrap = styled.div`
  & > *:first-child {
    margin-top: 0;
  }

  .centered {
    text-align: center;
  }

  .rounded-corners {
    border-radius: 15px;
  }

  &,
  & p,
  & figure {
    & > * {
      margin-left: auto;
      margin-right: auto;
      max-width: 653px;

      @media only screen and (max-width: 1068px) {
        max-width: 576px;
      }

      @media only screen and (max-width: 734px) {
        max-width: 87.5%;
      }
    }

    & > .wide {
      max-width: 100%;
    }

    & > .full-width {
      width: 100vw;
      max-width: 100vw;
      position: relative;
      left: 50%;
      transform: translateX(-50%);
    }
  }

  p {
    font-size: 19px;
    line-height: 1.4211;
    font-weight: 400;
    letter-spacing: 0.012em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display',
      'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
    margin-bottom: 1.4211em;
  }

  img,
  video,
  iframe {
    display: block;
    margin-top: 44px;
    margin-bottom: 44px;

    &.crop-top {
      object-position: top;
    }

    &.crop-right {
      object-position: right;
    }

    &.crop-bottom {
      object-position: bottom;
    }

    &.crop-left {
      object-position: left;
    }

    &.ratio-1-1 {
      object-fit: cover;
      aspect-ratio: 1/1;
    }

    &.ratio-5-4 {
      object-fit: cover;
      aspect-ratio: 5/4;
    }
    &.ratio-4-3 {
      object-fit: cover;
      aspect-ratio: 4/3;
    }
    &.ratio-7-5 {
      object-fit: cover;
      aspect-ratio: 7/5;
    }
    &.ratio-3-2 {
      object-fit: cover;
      aspect-ratio: 3/2;
    }
    &.ratio-16-9 {
      object-fit: cover;
      aspect-ratio: 16/9;
    }
    &.ratio-2-1 {
      object-fit: cover;
      aspect-ratio: 2/1;
    }
    &.ratio-21-9 {
      object-fit: cover;
      aspect-ratio: 21/9;
    }
    &.ratio-5-2 {
      object-fit: cover;
      aspect-ratio: 5/2;
    }
    &.ratio-3-1 {
      object-fit: cover;
      aspect-ratio: 3/1;
    }

    &.ratio-4-5 {
      object-fit: cover;
      aspect-ratio: 4/5;
    }
    &.ratio-3-4 {
      object-fit: cover;
      aspect-ratio: 3/4;
    }
    &.ratio-5-7 {
      object-fit: cover;
      aspect-ratio: 5/7;
    }
    &.ratio-2-3 {
      object-fit: cover;
      aspect-ratio: 2/3;
    }
    &.ratio-9-16 {
      object-fit: cover;
      aspect-ratio: 9/16;
    }
    &.ratio-1-2 {
      object-fit: cover;
      aspect-ratio: 1/2;
    }
    &.ratio-2-5 {
      object-fit: cover;
      aspect-ratio: 2/5;
    }
    &.ratio-1-3 {
      object-fit: cover;
      aspect-ratio: 1/3;
    }
  }

  *:not(pre):not(.codeblock) > code {
    background: var(--fill-gray-quaternary);
    padding: 0.2em 0.4em;
    margin: 0;
    border-radius: 0.25em;
    white-space: break-spaces;
    font-size: 85%;
  }

  pre {
    /* width: 653px; */
    margin-top: 28px;
    margin-bottom: 28px;
    /* margin: 28px auto; */
    font-size: 15px;
    line-height: 25px;
    font-weight: 400;

    & > code {
      display: block;
      color: var(--color-syntax-plain-text);
      background: var(--color-syntax-background);
      font-family: 'SF Mono', SFMono-Regular, ui-monospace, Menlo, monospace;
      direction: ltr;
      text-align: left;
      white-space: pre;
      word-spacing: normal;
      word-break: normal;
      line-height: 1.666;
      tab-size: 4;
      hyphens: none;
      padding: 0.5333em 0.9333em;
      margin: 0.5em 0px;
      overflow: auto;
      border-radius: 15px;
    }

    & > .codeblock {
      border-radius: 15px;
    }
  }

  p,
  li,
  th,
  td,
  code,
  figcaption {
    & > a {
      &:hover {
        text-decoration: underline;
      }
    }
  }

  table {
    margin-top: 44px;
    margin-bottom: 44px;
    border-spacing: 0;
    overflow-x: auto;
    width: 100%;
    th,
    td {
      padding: 0.75em 0;
      border-bottom: 1px solid var(--separator-secondary-color);
      font-size: 17px;
      line-height: 25px;
    }
    th {
      border-bottom: 1.5px solid var(--label-tertiary-color);
    }
  }

  figure {
    max-width: 100%;
    margin-top: 44px;
    margin-bottom: 44px;

    img,
    video,
    iframe {
      margin-top: 0;
      margin-bottom: 0;
    }

    figcaption {
      display: block;
      max-width: 653px;
      position: relative;
      color: #6e6e73;
      margin-top: 16px;
      font-size: 12px;
      line-height: 1.33337;
      font-weight: 600;
      letter-spacing: -0.01em;
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
        'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;

      @media only screen and (max-width: 1068px) {
        max-width: 576px;
      }

      @media only screen and (max-width: 734px) {
        max-width: 87.5%;
      }
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin-top: 1.25em;
    margin-bottom: 20px;
    line-height: 1.125;
  }

  hr {
    margin-top: 44px;
    margin-bottom: 44px;
    display: block;
    border: 0;
    border-top: 1px solid var(--separator-color);
  }

  h1 {
    font-size: 48px;
  }

  h2 {
    font-size: 32px;
  }

  h3 {
    font-size: 24px;
  }

  h4 {
    font-size: 19px;
  }

  ul,
  ol {
    padding-left: 2em;
    box-sizing: border-box;
    font-size: 19px;
    margin-bottom: 1.4211em;
    li {
      margin-top: 0.5em;
      & > ul,
      & > ol {
        margin-bottom: 0;
      }
    }
  }

  blockquote {
    &:not(.alert) {
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display',
        'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
      position: relative;

      &:not(.wide):not(.full-width) {
        padding-left: calc(1em + 4px);
        font-size: 19px;
        line-height: 1.4211;
        font-weight: 400;
        letter-spacing: 0.012em;
        font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display',
          'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
        margin-bottom: 1.4211em;
        color: var(--label-tertiary-color);
        &:before {
          content: '';
          display: block;
          position: absolute;
          left: 0;
          top: 0.125em;
          bottom: 0.125em;
          border-left: 4px solid var(--separator-color);
        }
      }

      p {
        margin-bottom: 0.7895em;
      }

      footer {
        font-size: 14px;
        line-height: 1.28577;
        font-weight: 600;
        letter-spacing: -0.016em;
        font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
          'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
      }

      &.wide,
      &.full-width {
        margin-top: 72px;
        margin-bottom: 72px;

        @media only screen and (max-width: 1068px) {
          padding: 1em;
        }

        &,
        & p {
          text-align: center;
          text-wrap: balance;
          font-size: 40px;
          @media only screen and (max-width: 1068px) {
            font-size: 36px;
          }

          @media only screen and (max-width: 734px) {
            font-size: 27px;
          }

          line-height: 1.1;
          font-weight: 700;
          letter-spacing: 0em;
        }

        &:not(:has(p)):before,
        &:not(:has(p)):after,
        & p:first-child:before,
        & p:last-of-type:after {
          display: inline-block;
          width: 2em;
        }

        &:not(:has(p)):before,
        & p:first-child:before {
          margin-left: -2em;
          text-align: right;
          content: '“';
        }

        &:not(:has(p)):after,
        & p:last-of-type:after {
          margin-right: -2em;
          text-align: left;
          content: '”';
        }
      }

      &.full-width {
        padding: 2em;
        background: var(--background-secondary-color);
        box-sizing: border-box;
      }
    }

    &.alert {
      width: 656px;
      max-width: 100%;
      margin: 28px auto;
      break-inside: avoid;
      border-radius: var(--aside-border-radius, 15px);
      border-style: var(--aside-border-style, solid);
      border-width: var(--aside-border-width, 1px 1px 1px 1px);
      padding: 0.9411764706rem;
      box-sizing: border-box;
      text-align: start;
      p {
        margin-top: 0.4em;
        margin-bottom: 0;
        width: auto;

        &:first-child {
          margin: 0;
        }
        &.alert-label {
          font-size: 1rem;
          line-height: 1.5294417647;
          font-weight: 600;
          letter-spacing: -0.021em;
          margin-top: -0.25em;
        }
      }
      &.note {
        background-color: var(--color-alert-note-background);
        border-color: var(--color-alert-note-border);
        box-shadow:
          0 0 1px 0 var(--color-alert-note-border) inset,
          0 0 1px 0 var(--color-alert-note-border);
        p.alert-label {
          color: var(--color-alert-note);
        }
      }
      &.tip {
        background-color: var(--color-alert-tip-background);
        border-color: var(--color-alert-tip-border);
        box-shadow:
          0 0 1px 0 var(--color-alert-tip-border) inset,
          0 0 1px 0 var(--color-alert-tip-border);
        p.alert-label {
          color: var(--color-alert-tip);
        }
      }
      &.important {
        background-color: var(--color-alert-important-background);
        border-color: var(--color-alert-important-border);
        box-shadow:
          0 0 1px 0 var(--color-alert-important-border) inset,
          0 0 1px 0 var(--color-alert-important-border);
        p.alert-label {
          color: var(--color-alert-important);
        }
      }
      &.warning {
        background-color: var(--color-alert-warning-background);
        border-color: var(--color-alert-warning-border);
        box-shadow:
          0 0 1px 0 var(--color-alert-warning-border) inset,
          0 0 1px 0 var(--color-alert-warning-border);
        p.alert-label {
          color: var(--color-alert-warning);
        }
      }
      &.caution {
        background-color: var(--color-alert-caution-background);
        border-color: var(--color-alert-caution-border);
        box-shadow:
          0 0 1px 0 var(--color-alert-caution-border) inset,
          0 0 1px 0 var(--color-alert-caution-border);
        p.alert-label {
          color: var(--color-alert-caution);
        }
      }
    }
  }

  iframe[src^="https://www.youtube.com/"]
  {
    display: block;
    width: 100%;
    height: auto;
    aspect-ratio: 16/9;
  }

  section.footnotes {
    ol {
      padding-left: 1.5em;
      li::marker,
      li p {
        font-size: 0.7895em;
        width: auto;
        margin: 0;
      }
    }
  }

  @media only screen and (max-width: 1068px) {
    font-size: 17px;
    line-height: 1.47059;
    font-weight: 400;
    letter-spacing: -0.022em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
      'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
  }

  @media only screen and (max-width: 1068px) {
    &,
    p,
    li,
    th,
    td,
    & blockquote:not(.wide):not(.full-width) {
      font-size: 17px;
      line-height: 1.47059;
      font-weight: 400;
      letter-spacing: -0.022em;
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
        'SF Pro Icons', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
    }
    th,
    td {
      font-size: 15px;
    }
    pre {
      font-size: 13px;
    }
  }
`;

================
File: components/common/Markdown/remarkAlerts.js
================
/**
 * [Analysis]: This plugin converts a Markdown blockquote with a special syntax
 * (e.g., [!NOTE]) into a styled "alert" block. It checks the first paragraph node
 * inside each blockquote to see if it begins with a recognized alert code like [!TIP].
 * If so, it:
 *   - Removes the marker ([!TIP], etc.)
 *   - Inserts a label at the top of the blockquote
 *   - Adds corresponding classes to style the alert
 *
 * Potential Issues/Considerations:
 *   1) Safety checks: Ensure we have a paragraph child with text.
 *   2) Preserving existing data.hProperties or className if already present.
 *   3) Avoiding the possibility of empty paragraphs or break tokens causing index issues.
 */

import { visit } from 'unist-util-visit';

const remarkAlerts = () => {
  const alertTypes = [
    { id: 'note', label: 'Note', code: '[!NOTE]' },
    { id: 'tip', label: 'Tip', code: '[!TIP]' },
    { id: 'important', label: 'Important', code: '[!IMPORTANT]' },
    { id: 'warning', label: 'Warning', code: '[!WARNING]' },
    { id: 'caution', label: 'Caution', code: '[!CAUTION]' },
  ];

  return (tree) => {
    visit(tree, 'blockquote', (node) => {
      // [Analysis]: If the blockquote is empty or doesn't have children, skip.
      if (!node.children || node.children.length === 0) return;

      const firstChild = node.children[0];

      alertTypes.forEach((alertType) => {
        // [Analysis]: Check if the first child is a paragraph with text,
        // and if it starts with the alert marker (e.g., [!NOTE]).
        if (
          firstChild?.type === 'paragraph' &&
          firstChild.children?.[0]?.type === 'text' &&
          firstChild.children[0].value.startsWith(alertType.code)
        ) {
          // Remove the alert marker from the paragraph's first text node
          firstChild.children[0].value = firstChild.children[0].value
            .replace(alertType.code, '')
            .trim();

          // [Analysis]: If removing the code marker leaves the text node empty, remove it.
          if (firstChild.children[0].value === '') {
            firstChild.children.shift();
          }

          // [Analysis]: If the next node is a line break, remove it.
          if (firstChild.children[0]?.type === 'break') {
            firstChild.children.shift();
          }

          // [Analysis]: Insert the alert label as a separate paragraph at the top.
          node.children.unshift({
            type: 'paragraph',
            children: [{ type: 'text', value: alertType.label }],
            data: { hProperties: { className: 'alert-label' } },
          });

          // [Analysis]: Add or update classes on the blockquote itself.
          // Ensure we preserve existing data.hProperties or classNames.
          node.data = node.data || {};
          node.data.hProperties = node.data.hProperties || {};
          const existingClasses = node.data.hProperties.className
            ? node.data.hProperties.className.split(' ')
            : [];

          // [Analysis]: Append "alert" and the specific alert type if not already present.
          const newClasses = new Set([...existingClasses, 'alert', alertType.id]);
          node.data.hProperties.className = Array.from(newClasses).join(' ');
        }
      });
    });
  };
};

export default remarkAlerts;

================
File: components/common/Markdown/remarkGithub.js
================
/**
 * Analysis:
 * - This plugin uses `unist-util-visit` to walk through the MDAST (Markdown AST).
 * - We only want to transform text nodes that are not children of a link node (i.e., not inside an existing link).
 * - Instead of calling `visit` inside another `visit`, we use a single pass:
 *   `visit(tree, 'text', (node, index, parent, ancestors) => { ... })`.
 * - We then replace text segments matching GitHub-specific patterns (#123, GitHub URLs, @usernames) with link nodes.
 */

import { visit } from 'unist-util-visit';
import { u } from 'unist-builder';

const isInsideLink = (node, ancestors) => {
  // Add null check for ancestors
  return ancestors?.some((ancestor) => ancestor.type === 'link') ?? false;
};

const remarkGithub = (options) => {
  const { defaultOrg, defaultRepo } = options ?? {};

  // [Analysis]: Regex definitions for capturing issue references, GitHub URLs, compare links, and usernames.
  const issueRegex = /#(\d+)/g;
  const fullUrlRegex =
    /https:\/\/github\.com\/([\w-]+)\/([\w-]+)\/(issues|pull)\/(\d+)/g;
  const compareUrlRegex =
    /https:\/\/github\.com\/([\w-]+)\/([\w-]+)\/compare\/([\w.-]+)\.\.\.([\w.-]+)/g;
  const usernameRegex = /@([\w-]+)/g; // Matches @username

  return (tree) => {
    // [Analysis]: Single pass over text nodes in the AST.
    visit(tree, 'text', (node, index, parent, ancestors) => {
      // Skip if we're already inside a link
      if (isInsideLink(node, ancestors)) return;

      const children = [];
      let lastIndex = 0;
      let match;

      function addText(text, start, end) {
        if (start < end) {
          children.push(u('text', text.slice(start, end)));
        }
      }

      // TODO (analysis): Extend logic to handle variations like my-org/my-repo#123 or my-repo#123 if needed.

      // --- 1) Handle issue numbers (e.g., #123) ---
      while ((match = issueRegex.exec(node.value)) !== null) {
        const [fullMatch, issueNumber] = match;
        addText(node.value, lastIndex, match.index);

        // Create a link node to GitHub issues
        children.push(
          u(
            'link',
            {
              url: `https://github.com/${defaultOrg}/${defaultRepo}/issues/${issueNumber}`,
            },
            [u('text', `#${issueNumber}`)]
          )
        );
        lastIndex = match.index + fullMatch.length;
      }

      // --- 2) Handle full GitHub URLs to issues or pull requests ---
      while ((match = fullUrlRegex.exec(node.value)) !== null) {
        const [fullMatch, org, repo, type, number] = match;
        addText(node.value, lastIndex, match.index);

        // Build link text:
        //  - If org is the defaultOrg and repo is the defaultRepo, just #number
        //  - Else show org/repo#number or partial org / partial repo
        const linkText = `${
          org === defaultOrg ? '' : `${org}/`
        }${
          org === defaultOrg && repo === defaultRepo ? '' : repo
        }#${number}`;

        children.push(
          u(
            'link',
            {
              url: `https://github.com/${org}/${repo}/${type}/${number}`,
            },
            [u('text', linkText)]
          )
        );
        lastIndex = match.index + fullMatch.length;
      }

      // --- 3) Handle GitHub compare URLs ---
      while ((match = compareUrlRegex.exec(node.value)) !== null) {
        const [fullMatch, org, repo, tag1, tag2] = match;
        addText(node.value, lastIndex, match.index);

        children.push(
          u(
            'link',
            {
              url: `https://github.com/${org}/${repo}/compare/${tag1}...${tag2}`,
            },
            [u('text', `${tag1}...${tag2}`)]
          )
        );
        lastIndex = match.index + fullMatch.length;
      }

      // --- 4) Handle GitHub usernames (e.g., @someuser) ---
      while ((match = usernameRegex.exec(node.value)) !== null) {
        const [fullMatch, usernameOrOrg] = match;
        addText(node.value, lastIndex, match.index);

        children.push(
          u('link', { url: `https://github.com/${usernameOrOrg}` }, [
            u('text', fullMatch),
          ])
        );
        lastIndex = match.index + fullMatch.length;
      }

      // Add remaining text (from last match to end of string)
      addText(node.value, lastIndex, node.value.length);

      // [Analysis]: If we actually created new nodes, replace the original text node
      if (
        children.length > 1 ||
        (children.length === 1 && children[0].type !== 'text')
      ) {
        parent.children.splice(index, 1, ...children);
      }
    });
  };
};

export default remarkGithub;

================
File: components/common/Button.jsx
================
import styled from "styled-components";

const Button = styled.a`
  cursor: ${({ disabled }) => disabled ? `default` : `pointer`};
  display: inline-flex;
  align-items: center;
  gap: 0.5em;
  text-align: center;
  white-space: nowrap;
  font-size: 17px;
  line-height: 1.17648;
  font-weight: 400;
  letter-spacing: -.022em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  min-width: 28px;
  padding-left: 16px;
  padding-right: 16px;
  padding-top: 8px;
  padding-bottom: 8px;
  border-radius: 18px;
  background: var(${({ disabled }) => disabled ? `--glyph-gray-tertiary` : `--color-fill-blue`});
  color: #fff;
  border: 0;
  outline: 0;

  ${({ size }) => size === "sm" ? `
    font-size: 12px;
    line-height: 1.33337;
    font-weight: 400;
    letter-spacing: -.01em;
    min-width: 23px;
    padding-left: 11px;
    padding-right: 11px;
    padding-top: 4px;
    padding-bottom: 4px;
    border-radius: 12px;
  ` : size === "lg" ? `
    padding-left: 21px;
    padding-right: 21px;
    padding-top: 11px;
    padding-bottom: 11px;
    border-radius: 21px;
  ` : ``}
  svg {
    width: 1em;
    height: 1em;
    vertical-align: center;
    margin: 0 -0.25em;
  }
`;

export default Button;

================
File: components/common/ColorSchemeToggle.jsx
================
import React, { useState, useEffect } from "react";
import styled from "styled-components"
import { useSite } from "@/components/common/Site";

const ColorSchemeToggleWrap = styled.div`
  --toggle-border-radius-outer: 12px;
  --toggle-border-radius-inner: 10px;
  --toggle-color-fill: var(--color-button-background-active);
  --toggle-color-text: var(--color-fill-blue);

  font-size: 12px;
  line-height: 1.33337;
  font-weight: 400;
  letter-spacing: -.01em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  border: 1px solid var(--toggle-color-fill);
  border-radius: var(--toggle-border-radius-outer, 2px);
  display: inline-flex;
  padding: 1px;
  input[type="radio"] {
    position: absolute;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(0px 0px 99.9% 99.9%);
    overflow: hidden;
    height: 1px;
    width: 1px;
    padding: 0;
    border: 0;
    appearance: none;
  }
`;
const ToggleOptionText = styled.div`
  cursor: pointer;
  box-sizing: border-box;
  display: inline-block;
  padding: 1px 6px;
  min-width: 42px;
  border: 1px solid transparent;
  border-radius: var(--toggle-border-radius-inner, 2px);
  text-align: center;
  color: var(--toggle-color-text);

  input[type="radio"]:checked + & {
    --toggle-color-text: var(--color-button-text);
    background: var(--toggle-color-fill);
    border-color: var(--toggle-color-fill);
  }
`;

function ColorSchemeToggle() {
  const [toggleValue, setToggleValue] = useState('auto');
  const { setColorScheme } = useSite();

  useEffect(() => {
    const theme = window.localStorage.getItem('colorScheme');

    if (theme) setToggleValue(theme)
  }, []);

  useEffect(() => {
    setColorScheme(toggleValue)
  }, [setColorScheme, toggleValue])

  const handleChange = (e) => setToggleValue(e.target.value)

  return (
    <ColorSchemeToggleWrap role="radiogroup" tabIndex={0} aria-label="Select a color scheme preference.">
      <label data-color-scheme-option="light">
        <input type="radio" name="colorToggle" value="light" autoComplete="off" checked={toggleValue === 'light'} onChange={handleChange} />
        <ToggleOptionText>Light</ToggleOptionText>
      </label>
      <label data-color-scheme-option="dark">
        <input type="radio" name="colorToggle" value="dark" autoComplete="off" checked={toggleValue === 'dark'} onChange={handleChange} />
        <ToggleOptionText>Dark</ToggleOptionText>
      </label>
      <label data-color-scheme-option="auto">
        <input type="radio" name="colorToggle" value="auto" autoComplete="off" checked={toggleValue === 'auto'} onChange={handleChange} />
        <ToggleOptionText>Auto</ToggleOptionText>
      </label>
    </ColorSchemeToggleWrap>
  )
}

export default ColorSchemeToggle;

================
File: components/common/Footer.jsx
================
import Link from 'next/link';
import React from 'react';
import styled from 'styled-components'
import ColorSchemeToggle from './ColorSchemeToggle';
import { mediaQueries } from '@/styles/breakpoints';
import SocialSection from './SocialSection';
import config from '@/data/config';

const FooterWrap = styled.footer`
  font-size: 12px;
  line-height: 1.33337;
  font-weight: 400;
  letter-spacing: -.01em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  overflow: hidden;
  position: relative;
  z-index: 1;
  background-color: var(--background-tertiary-color);
  color: var(--label-tertiary-color);
  box-sizing: content-box;
  a {
    color: var(--glyph-blue);
    :hover {
      text-decoration: underline;
    }
  }
`

const FooterContent = styled.div`
  margin: 0 auto;
  max-width: 980px;
  padding: 0 22px;
  padding-left: calc(max(22px, env(safe-area-inset-left)));
  padding-right: calc(max(22px, env(safe-area-inset-right)));
`

const FooterMini = styled.section`
  color: var(--glyph-gray-tertiary);
  padding-top: 34px;
  padding-bottom: calc(max(21px, env(safe-area-inset-bottom)));
  color: #86868b;
`
const MiniFooterTop = styled.div`
  margin-bottom: 7px;
  padding-bottom: 8px;
  border-bottom: 1px solid #d2d2d7;
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
  border-color: var(--separator-color);
  @media ${mediaQueries.sm} {
    align-items: flex-start;
    flex-direction: column;
    gap: 5px;
  }
}
`
const LegalCopyright = styled.div`
`
const LegalLinks = styled.div`
  display: flex;
  flex-wrap: wrap;
  a {
    border-right: 1px solid #d2d2d7;
    margin-right: 7px;
    padding-right: 10px;
    display: inline-block;
    margin-top: 5px;
    white-space: nowrap;
    color: var(--glyph-gray-secondary-alt);
    border-color: var(--fill-gray-tertiary);
    &:last-child {
      border: 0;
      margin-right: 0;
      padding-right: 0;
    }
  }
`
const LegalLink = styled(Link)``

const MiniFooterBottom = styled.div`
  display: flex;
  justify-content: space-between;
  a {
    color: var(--glyph-gray-secondary-alt);
    :hover {
      text-decoration: underline;
    }
  }
  @media ${mediaQueries.sm} {
    flex-direction: column;
  }
`

function Footer() {
  let currentYear = new Date().getFullYear();

  return (
    <FooterWrap
      id="footer"
      className="footer"
      role="contentinfo"
      aria-labelledby="footer-label"
    >
      <FooterContent>
        <SocialSection />
        <FooterMini>
          <MiniFooterTop>
            <div>To view the latest Voxa developments, visit <a href={config.links.githubProject}>our roadmap</a>.</div>
            <ColorSchemeToggle />
          </MiniFooterTop>
          <MiniFooterBottom>
            <LegalCopyright>
              Copyright &copy; {currentYear}{' '}
              <a href={config.host}>Voxa</a>. All rights reserved.
            </LegalCopyright>
            <LegalLinks>
              {/* <LegalLink href="/legal/tos">
                Terms of Use
              </LegalLink>
              <LegalLink href="/legal/privacy">
                Privacy Policy
              </LegalLink> */}
              <LegalLink href={config.links.license}>
                License
              </LegalLink>
            </LegalLinks>
          </MiniFooterBottom>
        </FooterMini>
      </FooterContent>
    </FooterWrap>
  );
}

export default Footer;

================
File: components/common/Header.jsx
================
import React, { useEffect, useRef, useState } from 'react';
import throttle from "lodash/throttle";
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router';
import styled from 'styled-components'
import { ExternalLink } from "react-feather"
import Button from '@/components/common/Button';
import { Container } from '@/components/common/layout';
import { mediaQueries } from '@/styles/breakpoints';
import config from '@/data/config';

const Nav = styled.nav`
  position: relative;
  top: 0;
  left: 0;
  width: 100%;
  height: 52px;
  z-index: 9997;
  position: sticky;
  * {
    box-sizing: content-box;
  }
  @media ${mediaQueries.sm} {
    height: 48px;
  }
`;
const Wrapper = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: auto;
  min-height: 100%;
  z-index: 1;
  transition: background-color 0.5s cubic-bezier(0.28, 0.11, 0.32, 1);
  background-color: var(--material-background-color);
  backdrop-filter: var(--material-filters);
  box-shadow: 0 1px 0 0 var(--material-separator-color);
  .menu-open & {
    background-color: var(--thick-material-background-color);
  }
`;
const HeaderContainer = styled(Container)`
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: space-between;
  @media ${mediaQueries.sm} {
    flex-direction: column;
    justify-content: stretch;
    align-items: flex-start;
  }
`;
const Title = styled.h2`
  font-size: 22px;
  line-height: 1.14286;
  font-weight: 600;
  letter-spacing: -0.033em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  cursor: default;
  display: block;
  margin: 0;
  padding: 0;
  white-space: nowrap;
  transition: color 0.5s cubic-bezier(0.28, 0.11, 0.32, 1);
  color: var(--glyph-gray);
  display: flex;
  align-items: center;
  padding: 10px 0;
  @media ${mediaQueries.sm} {
    padding: 10px 0;
    font-size: 19px;
    margin-left: 0px;
  }
  a {
    display: inline-block;
    letter-spacing: inherit;
    line-height: inherit;
    margin: 0;
    text-decoration: none;
    white-space: nowrap;
    color: var(--glyph-gray);
    opacity: .92;
  }
  img {
    margin-left: -3px;
    padding-right: 10px;
    cursor: pointer;
    @media ${mediaQueries.sm} {
      margin-left: -2px;
      padding-right: 8px;
      width: 28px;
      height: auto;
    }
  }
  span {
    cursor: pointer;
  }
`;
const Menu = styled.div`
  font-size: 12px;
  line-height: 1;
  font-weight: 400;
  letter-spacing: -.01em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  display: flex;
  align-items: center;
  gap: 24px;
  @media ${mediaQueries.sm} {
    width: 100%;
  }
`;
const MenuTray = styled.div`
  display: flex;
  align-items: center;
  gap: 24px;
  @media ${mediaQueries.sm} {
    float: none;
    overflow: hidden;
    pointer-events: none;
    visibility: hidden;
    width: 100%;
    padding-top: 0;
    max-height: 0;
    transition: max-height 0.5s cubic-bezier(0.28, 0.11, 0.32, 1) 0.4s,visibility 0s linear 1s;
    .menu-open & {
      max-height: 400px;
      max-height: calc(100vh - 48px - 48px);
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
      pointer-events: auto;
      visibility: visible;
      transition-delay: 0.2s, 0s;
    }
  }
`;
const MenuItems = styled.ul`
  @media ${mediaQueries.sm} {
    width: 100%;
    opacity: 0;
    padding: 4px 24px 24px;
    transform: translate3d(0, -150px, 0);
    transition: transform 1s cubic-bezier(0.23, 1, 0.32, 1) 0.5s,opacity 0.7s cubic-bezier(0.23, 1, 0.32, 1) 0.2s;

    .menu-open & {
      opacity: 1;
      transform: translate3d(0, 0, 0);
      transition-delay: 0.2s, 0.4s;
    }
  }
`;
const MenuItem = styled.li`
  margin-left: 24px;
  float: left;
  list-style: none;
  display: flex;
  gap: 4px;
  align-items: center;
  @media ${mediaQueries.sm} {
    margin-left: 0;
    display: inline-block;
    float: none;
    width: 100%;
    height: 44px;
    
    &:first-child a {
      border: 0;
    }
    
    transition-delay: 0.63s;
    &:nth-child(1) a {
      transition-delay: 0.07s;
    }
    &:nth-child(2) a {
      transition-delay: 0.14s;
    }
    &:nth-child(3) a {
      transition-delay: 0.21s;
    }
    &:nth-child(4) a {
      transition-delay: 0.28s;
    }
    &:nth-child(5) a {
      transition-delay: 0.35s;
    }
    &:nth-child(6) a {
      transition-delay: 0.42s;
    }
    &:nth-child(7) a {
      transition-delay: 0.49s;
    }
    &:nth-child(8) a {
      transition-delay: 0.56s;
    }

    .menu-open & {
      transition-delay: 0s;
      &:nth-child(1) a {
        transition-delay: 0.56s;
      }
      &:nth-child(2) a {
        transition-delay: 0.49s;
      }
      &:nth-child(3) a {
        transition-delay: 0.42s;
      }
      &:nth-child(4) a {
        transition-delay: 0.35s;
      }
      &:nth-child(5) a {
        transition-delay: 0.28s;
      }
      &:nth-child(6) a {
        transition-delay: 0.21s;
      }
      &:nth-child(7) a {
        transition-delay: 0.14s;
      }
      &:nth-child(8) a {
        transition-delay: 0.07s;
      }
      
    }
  }
`;
const MenuLink = styled(Link)`
  color: var( --foreground-color);
  display: inline-block;
  line-height: 22px;
  white-space: nowrap;
  opacity: 0.88;
  &:hover {
    color: var(--glyph-blue);
  }
  ${({ $current }) => $current ? `
    color: var(--foreground-color) !important;
    opacity: 0.56;
  ` : ``}
  @media ${mediaQueries.sm} {
    border-top: 1px solid rgba(0,0,0,0.181818);
    /* border-top: 1px solid var(--separator-color); */
    [data-color-scheme="dark"] & {
      border-color: rgba(255,255,255,0.26087);
    }
    display: flex;
    align-items: center;
    height: 100%;
    line-height: 1.3;
    opacity: 0;
    transform: translate3d(0, -25px, 0);
    transition: 0.5s ease;
    transition-property: transform, opacity;
    width: 100%;
    .menu-open & {
      opacity: ${({ $current }) => $current ? 0.56 : 0.92};
      transform: translate3d(0, 0, 0);
    }
    ${({ $current }) => $current ? `
      border-color: rgba(0,0,0,0.285714);
      [data-color-scheme="dark"] & {
        border-color: rgba(255,255,255,0.428571);
      }
    ` : ``}
  }
`;
const StyledExternalLink = styled(ExternalLink)`
  opacity: 0.5;
  margin-top: -2px;
  margin-left: 0.25em;
`;
const Actions = styled.div`
  display: flex;
  align-items: center;
  
  @media ${mediaQueries.sm} {
    right: 0;
    padding: 9px 16px;
    position: absolute;
    top: 0;
    z-index: 1;
  }
`;
const Action = styled.div``;
const MenuToggle = styled.div`
  margin-right: 6px;
  cursor: pointer;
  display: none;
  overflow: hidden;
  width: 40px;
  height: 30px;
  -webkit-tap-highlight-color: transparent;
  @media ${mediaQueries.sm} {
    display: block;
  }
`;
const MenuChevron = styled.span`
  display: block;
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 1;
  transition: transform 1s cubic-bezier(0.86, 0, 0.07, 1),transform-origin 1s cubic-bezier(0.86, 0, 0.07, 1);
  transform: translateY(0);
  opacity: 0.8;
  .menu-open & {
    transform: translateY(-8px);
  }

  &:before,
  &:after {
    content: "";
    display: block;
    position: absolute;
    top: 18px;
    width: 11px;
    height: 1px;
    z-index: 1;
    transition: transform 1s cubic-bezier(0.86, 0, 0.07, 1),transform-origin 1s cubic-bezier(0.86, 0, 0.07, 1);
    background: #000;

  }
  &:before {
    right: 50%;
    border-radius: 0.5px 0 0 0.5px;
    transform-origin: 100% 100%;
    transform: rotate(40deg) scaleY(1.1);    
    .menu-open & {
      transform-origin: 100% 0%;
      transform: rotate(-40deg) scaleY(1.1);
    }  
  }
  &:after {
    left: 50%;
    border-radius: 0 0.5px 0.5px 0;
    transform-origin: 0% 100%;
    transform: rotate(-40deg) scaleY(1.1); 
    .menu-open & {
      transform-origin: 0% 0%;
      transform: rotate(40deg) scaleY(1.1);
    }
  }

  html[data-color-scheme='dark'] &::before,
  html[data-color-scheme='dark'] &::after {
    background: var(--glyph-gray);
  }
`;

function Header() {
  const router = useRouter();
  const [isOpen, setIsOpen] = useState();
  const menuRef = useRef();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef?.current && !menuRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    const handleScroll = () => {
      setIsOpen(val => val ? false : val)
    }

    const throttledHandleScroll = throttle(handleScroll, 1000);

    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('scroll', throttledHandleScroll);

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('scroll', throttledHandleScroll);
    }
  }, [menuRef]);

  return (
    <Nav role="navigation" className={isOpen ? "menu-open" : ""} ref={menuRef}>
      <Wrapper>
        <HeaderContainer>
          <Link href="/">
            <Title>
              <Image
                width={32}
                height={32}
                src="/product-icon.png"
                alt="Voxa product icon"
              />
              <span>{config.title}</span>
            </Title>
          </Link>
          <Menu>
            <MenuTray>
              <MenuItems>
                {config.navigation.map(href => {
                  const isExternal = href.match(/(https?:\/\/[\w\d.-]+)/gi);
                  const item = config.pages[href];

                  return (
                    <MenuItem key={href} {...(isExternal ? { target: "_blank" } : {})}>
                      <MenuLink onClick={() => setIsOpen(false)} href={href} $current={router.asPath === href || (href !== "/" && router.asPath.startsWith(href))}>
                        {item.title}
                        {isExternal && <StyledExternalLink size={11} />}
                      </MenuLink>
                    </MenuItem>
                  );
                })}
              </MenuItems>
            </MenuTray>
            <Actions>
              <Action>
                <MenuToggle onClick={() => setIsOpen(val => !val)}>
                  <MenuChevron className="codeeditnav-menucta-chevron"></MenuChevron>
                </MenuToggle>
              </Action>
              <Action>
                <Button href="/download" size="sm">Download</Button>
              </Action>
            </Actions>
          </Menu>
        </HeaderContainer>
      </Wrapper>
    </Nav>
  );
}

export default Header;

================
File: components/common/IconButton.jsx
================
import styled from "styled-components";

const Button = styled.a`
  cursor: ${({ disabled }) => disabled ? `default` : `pointer`};
  display: inline-block;
  text-align: center;
  white-space: nowrap;
  font-size: 17px;
  line-height: 1.17648;
  font-weight: 400;
  letter-spacing: -.022em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  min-width: 28px;
  padding: 4px;
  border-radius: 18px;
  color: var(${({ disabled }) => disabled ? `--glyph-gray-tertiary` : `--color-fill-blue`});
  border: 0;
  outline: 0;
  transition: 200ms;

  &:hover {
    opacity: 0.66;
  }

  &:active {
    opacity: 0.33;
  }

  ${({ compact }) => compact ? `
    font-size: 12px;
    line-height: 1.33337;
    font-weight: 400;
    letter-spacing: -.01em;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    min-width: 23px;
    padding: 0;
    border-radius: 12px;
  ` : ``}
`;

export default Button;

================
File: components/common/Menu.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { usePopper } from 'react-popper';
import { detectOverflow } from '@popperjs/core';

import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { mediaQueries } from '@/styles/breakpoints';

const MenuWrap = styled.div`
  min-width: 160px;
  display: flex;
  flex-direction: column;
  z-index: 9996;
  max-height: 400px;

  @media ${mediaQueries.sm} {
    position: fixed;
    inset: auto auto 0 0 !important;
    transform: none !important;
    display: block;
    /* height: calc(100% - 6rem); */
    max-height: calc(100vh - 10rem - env(safe-area-inset-top) - env(safe-area-inset-bottom));
    width: 100vw;
    box-sizing: border-box;
    z-index: 9999;
    &:before {
      background-color: #00000052;
      content: "";
      display: block;
      height: 100vh;
      left: 0;
      position: fixed;
      top: 0;
      transition: opacity .4s cubic-bezier(.19,1,.22,1);
      width: 100vw;
      z-index: -1;
      pointer-events: none;
    }
  }
`
const MenuInside = styled.div`
  overflow-y: auto;
  width: 100%;
  background: var(--background-tertiary-color);
  border: 1px solid var(--separator-color);;
  padding: 5px;
  border-radius: 10px;
  align-items: stretch;
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
  box-sizing: border-box;

  @media ${mediaQueries.sm} {
    border: 0;
    max-height: calc(100vh - 10rem - env(safe-area-inset-top) - env(safe-area-inset-bottom));
    border-radius: 10px 10px 0 0;
  }
`

const MenuItemWrap = styled.button`
  display: flex;
  gap: 10px;
  align-items: center;
  width: 100%;
  padding: 6px 10px;
  border-radius: 5px;
  background: transparent;
  border: 0;
  color: inherit;
  cursor: pointer;
  text-align: left;
  box-sizing: border-box;
  &:hover, &:focus {
    background: var(--fill-gray-quaternary);
  }
  &:active {
    background: var(--fill-gray-tertiary);
  }
  @media ${mediaQueries.sm} {
    padding: 14px 15px;
    border-top: 1px solid --var(--separator-color);
    font-size: 14px;
    &:has(svg) {
      flex-direction: row-reverse;
      justify-content: space-between;      
    }
  }
  
  svg {
    width: 16px;
    height: 16px;
  }
`
const MenuCancel = styled.div`
  display: none;
  position: sticky;
  bottom: 0;
  padding-bottom: 5px;
  margin-top: -5px;
  transform: translateY(5px);
  background: var(--background-tertiary-color);
  ${MenuItemWrap} {
    justify-content: center;
  }
  @media ${mediaQueries.sm} {
    display: block;
  }
`

const MenuDivider = styled.hr`
  margin: 5px;
  border: 0;
  border-top: 1px solid var(--separator-color);;
  border-left: 1px solid var(--separator-color);;
`

const Menu = ({ trigger, children, placement = 'bottom-end', ...props }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [triggerEl, setTriggerEl] = useState(null);
  const [popperEl, setPopperEl] = useState(null);

  const { styles, attributes } = usePopper(triggerEl, popperEl, {
    placement,
    strategy: 'fixed',
    modifiers: [
    {
      name: 'offset',
      options: {
        offset: [0, 5],
      },
    },
  ],
  });

  const menuTrigger = trigger();

  const TriggerComponent = React.cloneElement(menuTrigger, {
    ref: setTriggerEl,
    onClick: () => setIsOpen(true),
    style: {
      ...menuTrigger.props.style,
      ...(isOpen ? { pointerEvents: 'none' } : {})
    }
  });

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (popperEl && !popperEl.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);

    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [popperEl]);

  const clonedChildren = React.Children.map(children, child => {
    if (React.isValidElement(child)) {
      return React.cloneElement(child, { onCloseMenu: () => setIsOpen(false) });
    }
    return child;
  });

  const menu = (
    <MenuWrap ref={setPopperEl} style={styles.popper} {...attributes.popper} {...props}>
      <MenuInside>
        {clonedChildren}
        <MenuCancel>
          <MenuDivider />
          <MenuItemWrap onClick={() => setIsOpen(false)}>Cancel</MenuItemWrap>
        </MenuCancel>
      </MenuInside>
    </MenuWrap>
  )

  return (
    <>
      {TriggerComponent}
      {isOpen ? (
        ReactDOM.createPortal(menu, document.body)
      ) : null}
    </>
  )
}

// MenuItem Component
const MenuItem = ({ icon: Icon, onClick, children, onCloseMenu }) => (
  <MenuItemWrap onClick={(e) => {
    onClick?.(e);
    onCloseMenu();
  }}>
    {Icon && <Icon />}
    {children}
  </MenuItemWrap>
);

export { Menu, MenuItem, MenuDivider };

================
File: components/common/Ribbon.jsx
================
import React from "react";
import styled, { keyframes } from "styled-components";

const ribbonDrop = keyframes`
  0% {
      transform: translateY(-100%);
  }
  100% {
      transform: translateY(0);
  }
`;
const RibbonWrap = styled.div`
  --ribbon-background-color: #0071e3;
  --ribbon-text-color: #fff;
  --ribbon-link-color: #fff;
  --ribbon-focus-color: rgba(255,255,255,0.6);
  overflow: hidden;
  ${({ onClick }) => onClick ? `cursor: pointer;` : ``}
`;
const RibbonDrop = styled.div`
  animation: ${ribbonDrop} 0.8s cubic-bezier(0.42, 0, 0.58, 1) forwards;
`;
const RibbonContentWrapper = styled.div`
  background-color: var(--ribbon-background-color);
  padding-top: 0.94118em;
  padding-bottom: 0.94118em;
  text-align: center;
`;
const RibbonContent = styled.div`
  color: var(--ribbon-text-color);
  font-size: 14px;
  line-height: 1.42859;
  font-weight: 400;
  letter-spacing: -.016em;
  font-family: -apple-system, BlinkMacSystemFont, sans-serif;
`;

function Ribbon({ children, onClick, ...props }) {
  return (
    <RibbonWrap onClick={onClick} {...props}>
      <RibbonDrop>
        <RibbonContentWrapper>
          <RibbonContent>
            {children}
          </RibbonContent>
        </RibbonContentWrapper>
      </RibbonDrop>
    </RibbonWrap>
  )
}

export default Ribbon;

================
File: components/common/Site.jsx
================
import React, { useEffect, useContext } from "react";
import theme from "@/styles/theme";
import { StyleSheetManager, ThemeProvider } from "styled-components";
import isPropValid from '@emotion/is-prop-valid'
import useColorScheme from "@/hooks/useColorScheme";
import useWindowDimensions from '../../hooks/useWindowDimensions';

export const SiteContext = React.createContext({});

const SiteContextProvider = SiteContext.Provider;

export const useSite = () => useContext(SiteContext);



const Site = ({ children }) => {
  const {
    colorSchemeSetting,
    colorScheme,
    getColorSchemeSetting,
    setColorScheme,
    getSystemColorScheme
  } = useColorScheme();
  const windowDimensions = useWindowDimensions();

  return (
    <SiteContextProvider value={{
      colorSchemeSetting,
      colorScheme,
      getColorSchemeSetting,
      setColorScheme,
      getSystemColorScheme,
      windowDimensions,
      breakpoint: windowDimensions.breakpoint
    }}>
      <StyleSheetManager
        enableVendorPrefixes
        shouldForwardProp={(propName, elementToBeRendered) => {
          return typeof elementToBeRendered === 'string' ? isPropValid(propName) : true;
        }}
      >
        <ThemeProvider theme={theme}>
          {children}
        </ThemeProvider>
      </StyleSheetManager>
    </SiteContextProvider>
  )
}

export default Site;

================
File: components/common/SocialSection.jsx
================
import styled from 'styled-components';
import { Heart } from 'react-feather';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack } from '@/components/common/layout';
import XSvg from '@/assets/x-icon.svg'
import DiscordSvg from '@/assets/discord-icon.svg'
import GitHubSvg from '@/assets/github-icon.svg'
import config from '@/data/config';

const XIcon = styled(XSvg)`
  width: 48px;
  height: 48px;
`
const DiscordIcon = styled(DiscordSvg)`
  width: 48px;
  height: 48px;
`
const GitHubIcon = styled(GitHubSvg)`
  width: 48px;
  height: 48px;
`

const SocialSection = () => {
  return (
    <Section contained gutterY>
      <Grid columns={{ xs: 1, md: 2, lg: 4}} gap>
        <GridItem>
          <Stack gap={1} align="center" style={{ textAlign: 'center' }}>
            <XIcon />
            <Typography variant="headline-body">Keep up to date</Typography>
            <Typography variant="body-reduced">
              Stay in the know! Follow us @plyght__ on X to get the
              latest updates.
            </Typography>
            <Typography variant="body-reduced"><a href={config.links.twitter}>Follow Us</a></Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack gap={1} align="center" style={{ textAlign: 'center' }}>
            <DiscordIcon />
            <Typography variant="headline-body">Join the conversation</Typography>
            <Typography variant="body-reduced">
              Some of the best ideas come from our community. Join us to influence Voxa.
            </Typography>
            <Typography variant="body-reduced"><a href={config.links.discord}>Start a conversation</a></Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack gap={1} align="center" style={{ textAlign: 'center' }}>
            <GitHubIcon />
            <Typography variant="headline-body">Start Contributing</Typography>
            <Typography variant="body-reduced">
              Help shape the future of Voxa. Submit an issue or become a contributor today.
            </Typography>
            <Typography variant="body-reduced"><a href={config.links.githubRepo}>Check it out</a></Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack gap={1} align="center" style={{ textAlign: 'center' }}>
            <Heart size={48} />
            <Typography variant="headline-body">Become a Sponsor</Typography>
            <Typography variant="body-reduced">
              Don&apos;t have time to contribute? You can show your support by becoming a sponsor.
            </Typography>
            <Typography variant="body-reduced"><a href={config.links.githubSponsor}>Sponsor the Project</a></Typography>
          </Stack>
        </GridItem>
      </Grid>
    </Section>
  );
}

export default SocialSection;

================
File: components/common/Tile.jsx
================
import { useMemo } from "react";
import styled from "styled-components";
import { v4 as uuidV4 } from "uuid";
import Typography from './Typography';

const TileWrap = styled.div`
    --tile-background-color: var(--background-tertiary-color);
    --tile-overlay-background-color: var(--section-accent-color ,#86868b);
    --tile-overlay-copy-max-width: 550px;

    position: relative;
    /* padding: 22px; */
    background-color: var(--background-tertiary-color);
    /* border-radius: 18px; */
    border-radius: 30px;
    overflow: hidden;

    ${({ color }) => color === 'blue' ? `
      background-image: radial-gradient(circle at 90% 0%,#239AF2 0%,#3F4CC8 100%);
      // background: linear-gradient(114.88deg,#3cd0ff,#0b0050),linear-gradient(107.56deg,#000e16,#0c21e0 48.44%,#05d2ff);
    ` : ``}
    ${({ color }) => color === 'deep-purple' ? `
      background: linear-gradient(to bottom right,#0D1387,#867AF6);
    ` : ``}
    ${({ color }) => color === 'purple' ? `
      background: #dd41b7;
      background: linear-gradient(137deg,#dd41b7,#5717a6);
    ` : ``}
    ${({ color }) => color === 'pink' ? `
      background: #dd41b7;
      background-image: radial-gradient(circle at 0% -25%,#FF7948 0%,#FF8355 0,#DA2C84 42%,#3E13A4 110%);
    ` : ``}

    &[data-color-scheme="dark"] {
      color: white;
    }

    ol+*, p+*, ul+* {
      margin-top: 0.8em;
    }
`;

const TileContent = styled.div`
  padding: 40px;
`;
const TileHeader = styled.div`
  margin-top: -4px;
  max-width: 655px;
`;
const TileHeadline = styled(Typography).attrs({ as: "h4" })`
    font-size: 21px;
    line-height: 1.1904761905;
    font-weight: 600;
    letter-spacing: .011em;
    font-family: SF Pro Display,SF Pro Icons,Helvetica Neue,Helvetica,Arial,sans-serif;
    ${({ overlay }) => overlay ? `` : `color: var(--section-accent-color);`}
`;
const TileCopy = styled(Typography)`
    font-size: 19px;
    line-height: 1.4211026316;
    font-weight: 600;
    letter-spacing: .012em;
    font-family: SF Pro Display,SF Pro Icons,Helvetica Neue,Helvetica,Arial,sans-serif;
    ${TileHeadline} + & {
      margin-top: 0.3em;
    }
`;
export const TileViolator = styled.div`
  box-sizing: border-box;
  white-space: nowrap;
  display: inline-block;
  background: transparent;
  border: 1px solid #bf4800;
  color: #bf4800;
  font-size: 17px;
  line-height: 1.1764805882;
  font-weight: 400;
  letter-spacing: -0.022em;
  font-family: SF Pro Text,SF Pro Icons,Helvetica Neue,Helvetica,Arial,sans-serif;
  border-radius: 18px;
  padding: 7px 18px;

  // reduced
  font-size: 12px;
  line-height: 1.3333733333;
  font-weight: 400;
  letter-spacing: -0.01em;
  font-family: SF Pro Text,SF Pro Icons,Helvetica Neue,Helvetica,Arial,sans-serif;
  border-radius: 12px;
  padding: 3px 11px;

  // tile violator
  background: transparent;
  /* border-color: #6e6e73;
  color: #6e6e73; */

`;
const TileBody = styled.div`

`;
const OverlayCheckbox = styled.input`
  display: none;
`;
const Overlay = styled.div`
    z-index: 10;
`;
const OverlayToggle = styled.label`
  -webkit-tap-highlight-color: transparent;
  z-index: 3;
  width: 44px;
  height: 44px;
  bottom: 24px;
  right: 24px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
`;
const TileButton = styled.span`
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  transition: background-color 100ms linear;
  z-index: 2;
  background-color: #86868b;
  color: var(--tile-background-color);
  opacity: .92;
  transition: background-color .66s cubic-bezier(0.66,0,0.01,1) .66s,color .66s cubic-bezier(0.66,0,0.01,1) .66s,transform .66s cubic-bezier(0.66,0,0.2,1),opacity 100ms linear;
  background-color: #6e6e73; //dark
  will-change: transform;
  svg {
    fill: currentColor;
    width: 50%;
    height: 50%;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }
  ${OverlayCheckbox}:checked ~ ${Overlay} & {
    color: var(--tile-overlay-background-color);
    background-color: #fff;
    transform: rotate(45deg);
    transition-delay: 0s;
  }
`;
const TileButtonText = styled.span`
    position: absolute;
    width: 100%;
    height: 100%;
`;
const VisuallyHidden = styled.span`
    position: absolute;
    clip: rect(1px,1px,1px,1px);
    -webkit-clip-path: inset(0px 0px 99.9% 99.9%);
    clip-path: inset(0px 0px 99.9% 99.9%);
    overflow: hidden;
    height: 1px;
    width: 1px;
    padding: 0;
    border: 0;
`;

const OverlayContent = styled.div`
  background-color: var(--tile-overlay-background-color);
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex: 1;
  position: absolute;
  width: 100%;
  height: 100%;
  padding: var(--tile-padding-top) var(--tile-padding-right) var(--tile-padding-bottom) var(--tile-padding-left);
  padding: 40px;
  top: 0;
  left: 0;
  opacity: 0;
  visibility: hidden;
  transition: opacity .66s cubic-bezier(0.66,0,0.01,1) .66s,visibility 0s linear 1.32s;
  border-radius: 30px;
  
  ${OverlayCheckbox}:checked ~ ${Overlay} & {
    opacity: 1;
    visibility: visible;
    transition-delay: 0s;
  }
`;
const OverlayHeader = styled.div`
  margin-top: -4px;
  max-width: 655px;
  & ${TileHeadline} {
    color: #fff;
  }
`;
const OverlayBody = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex: 1;
    height: 100%;
    align-items: center;
`;
const OverlayCopy = styled.div`
    font-size: 19px;
    line-height: 1.4211026316;
    font-weight: 600;
    letter-spacing: .012em;
    font-family: SF Pro Display,SF Pro Icons,Helvetica Neue,Helvetica,Arial,sans-serif;

    color: #fff;

    max-width: var(--tile-overlay-copy-max-width);
    opacity: 0;
    transform: translateY(-20px);
    transition: all .66s cubic-bezier(0.66,0,0.2,1);

    ${OverlayCheckbox}:checked ~ ${Overlay} & {
      opacity: 1;
      transform: translateY(0);
      transition-delay: .66s; 
    }
`;

const Tile = ({ children, headline, copy, overlay, violator, overlayCopy, ...props }) => {
  const conditionalProps = {};
  if (props.color) conditionalProps["data-color-scheme"] = "dark"

  const id = useMemo(() => uuidV4(), []);

  return (
    <TileWrap {...conditionalProps} {...props}>
      <TileContent>
        {(headline || copy || violator) && (
          <TileHeader>
            {headline && <TileHeadline>{headline}</TileHeadline>}
            {copy && <TileCopy>{copy}</TileCopy>}
            {violator && <TileViolator>{violator}</TileViolator>}
          </TileHeader>
        )}
        <TileBody>
          {children}
        </TileBody>
      </TileContent>
      {(overlay || overlayCopy) && (
        <>
          <OverlayCheckbox type="checkbox" id={`tile-overlay-toggle-${id}`} />
          <Overlay>
            <OverlayToggle for={`tile-overlay-toggle-${id}`}>
              <TileButton>
                <svg className="tile-icon-alt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                  <path d="M18.5,8.51h-7v-7A1.5,1.5,0,0,0,10,0h0A1.5,1.5,0,0,0,8.5,1.5v7h-7a1.5,1.5,0,0,0,0,3h7v7A1.5,1.5,0,0,0,10,20h0a1.5,1.5,0,0,0,1.5-1.5v-7h7a1.5,1.5,0,0,0,0-3Z"></path>
                </svg>
              </TileButton>
              <TileButtonText role="button" aria-expanded="false" aria-controls="content-toggle-shortcuts-app">
                <VisuallyHidden>Learn more</VisuallyHidden>
              </TileButtonText>
            </OverlayToggle>

            <OverlayContent>
            <OverlayHeader>
              <TileHeadline overlay>{headline}</TileHeadline>
            </OverlayHeader>
            <OverlayBody>
              {overlayCopy && <OverlayCopy>{overlayCopy}</OverlayCopy>}
              {typeof overlay === "function" ? overlay() : overlay}
            </OverlayBody>
            </OverlayContent>
          </Overlay>
        </>
      )}
    </TileWrap>
  );
}

export default Tile;

================
File: components/common/Typography.jsx
================
import PropTypes from 'prop-types';
import styled from 'styled-components';
import getTypographyStyles from '@/styles/getTypographyStyles';

const TypographyWrap = styled.p`
  ${({ variant }) => getTypographyStyles(variant)}
  ${({ gutter, gutterTop }) => gutter || gutterTop ? `
    margin-top: 1em;
  ` : ``}
  ${({ gutter, gutterBottom }) => gutter || gutterBottom ? `
    margin-bottom: 1em;
  ` : ``}
  ${({ color = "primary" }) => color ? `
    color: var(--label-${color}-color);
  ` : ``}
`;

const secondaryVariants = ['body', 'body-tight', 'body-reduced', 'body-reduced-tight'];

function Typography({ children, variant = "body", color, as, ...props }) {
  let elementType = 'p';

  let variantColor = secondaryVariants.includes(variant) ? 'secondary' : undefined;

  return (
    <TypographyWrap variant={variant} color={color ?? variantColor} as={as ?? elementType} {...props}>
      {children}
    </TypographyWrap>
  );
}

Typography.propTypes = {
  variant: PropTypes.oneOf([
    'headline-standalone',
    'headline-super',
    'headline-elevated',
    'headline',
    'headline-reduced',
    'eyebrow-super',
    'eyebrow-elevated',
    'eyebrow',
    'eyebrow-reduced',
    'intro-elevated',
    'intro',
    'section-head',
    'quote',
    'quote-reduced',
    'callout',
    'manifesto',
    'label',
    'tout',
    'body',
    'body-tight',
    'body-reduced',
    'body-reduced-tight',
    'caption',
    'sosumi',
    'headline-body',
    'headline-body-reduced',
  ]),
};

export default Typography;

================
File: components/pages/blog/post/AboutAuthor.jsx
================
import Image from 'next/image';
import XSvg from '@/assets/x-icon.svg';
import GitHubSvg from '@/assets/github-icon.svg';
import { Globe } from 'react-feather';
import styled from 'styled-components';

const AboutAuthorWrap = styled.div`
  .component-content {
    border-top: 1px solid var(--separator-color);
    padding-top: 52px;
    .author-container {
      display: flex;
      gap: 1.1579em;
      margin-top: 1.4211em;
    }
    img.author-image {
      width: 96px;
      height: 96px;
      border-radius: 50%;
    }
    .author-info {
      font-size: 14px;
      line-height: 1.42859;
      font-weight: 500;
      letter-spacing: -0.016em;
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue',
        'Helvetica', 'Arial', sans-serif;
      box-sizing: border-box;
      word-wrap: break-word;
      display: inline-block;
      vertical-align: top;
    }
    .author-info-title {
      font-size: 19px;
      line-height: 1.21053;
      font-weight: 700;
      letter-spacing: 0.012em;
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue',
        'Helvetica', 'Arial', sans-serif;
      margin-bottom: 3px;
    }
    .author-info-name {
      margin-bottom: 3px;
    }
    .author-info-location {
      margin-top: -2px;
      margin-bottom: 3px;
      opacity: 0.65;
    }
    .author-info-bio {
      margin-bottom: 3px;
    }
    .author-social {
      margin-top: 12px;
      .author-social-link {
        margin-right: 16px;
        svg {
          width: 16px;
          height: 16px;
        }
      }
    }
  }

  @media only screen and (max-width: 734px) {
    margin-left: auto;
    margin-right: auto;
    width: 87.5%;
  }
`;

const AboutAuthor = ({ author }) => {
  if (!author) return;

  // If the author's url does not start with http(s) then append https
  if (!author.blog.startsWith('http')) {
    author.blog = `https://${author.blog}`;
  }
  
  return (
    <AboutAuthorWrap className="about-author component">
      <div className="component-content">
        <h2 className="about-author-headline">About the Author</h2>
        <div className="author-container">
          <Image
            className="author-image"
            width="128"
            height="128"
            src={author.avatar_url}
            alt={`${author.name} user image`}
          />
          <div className="author-info">
            <p className="author-info-title">{author.name}</p>
            <p className="author-info-text">{author.location}</p>
            <p className="author-info-text">{author.bio}</p>
            <div className="author-social">
              <a
                className="author-social-link"
                href={author.blog}
                target="_blank"
              >
                <Globe />
              </a>
              <a
                className="author-social-link"
                href={`https://github.com/${author.login}`}
                target="_blank"
              >
                <GitHubSvg />
              </a>
              <a
                className="author-social-link"
                href={`https://x.com/${author.twitter_username}`}
                target="_blank"
              >
                <XSvg />
              </a>
            </div>
          </div>
        </div>
      </div>
    </AboutAuthorWrap>
  );
};

export default AboutAuthor

================
File: components/pages/blog/post/ArticleHeader.jsx
================
import Image from "next/image";
import ShareSheet from "./ShareSheet";
import styled from "styled-components";
import config from '@/data/config';

const ArticleHeaderWrap = styled.div`
  .category.component {
    margin-top: 0;
    margin-bottom: 20px;
  }

  .category-eyebrow__category {
    text-transform: uppercase;
  }

  .category-eyebrow__category,
  .category-eyebrow__date {
    display: block;
  }

  .category-eyebrow {
    font-size: 12px;
    line-height: 1.33337;
    font-weight: 700;
    letter-spacing: -0.01em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
  }

  .category-eyebrow__date {
    margin-top: 4px;
  }

  .category-eyebrow__date {
    font-size: 14px;
    line-height: 1.28577;
    font-weight: 600;
    letter-spacing: -0.016em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
  }

  .pagetitle.component {
    margin-top: 0;
    margin-bottom: 0;
  }

  .pagetitle .hero-headline {
    font-size: 48px;
    line-height: 1.08349;
    font-weight: 700;
    letter-spacing: -0.003em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;

    @media only screen and (max-width: 1068px) {
      font-size: 40px;
      line-height: 1.1;
      letter-spacing: 0em;
    }

    @media only screen and (max-width: 734px) {
      font-size: 32px;
      line-height: 1.125;
      letter-spacing: 0.004em;;
    }
  }

  .article-subhead.component {
    font-size: 24px;
    line-height: 1.16667;
    font-weight: 500;
    letter-spacing: 0.009em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
    margin-top: 20px;
    margin-bottom: 0;

    @media only screen and (max-width: 1068px) {
      font-size: 21px;
      line-height: 1.19048;
      letter-spacing: .011em;
    }
  }

  .author.component {
    margin-top: 20px;
    margin-bottom: 0;
  }

  .author-content {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .author-image {
    width: 24px;
    height: 24px;
    border-radius: 50%;
  }

  .author-text {
    font-size: 14px;
    line-height: 1.28577;
    font-weight: 600;
    letter-spacing: -0.016em;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
  }

  @media only screen and (max-width: 734px) {
    margin-left: auto;
    margin-right: auto;
    width: 87.5%;
  }
`;


function formatDate(fullDate) {
  const date = new Date(fullDate);
  return date.toLocaleDateString('en-us', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC',
  });
}

const ArticleHeader = ({ frontmatter, author }) => {
  return (
    <ArticleHeaderWrap className="article-header">
      <div className="category component">
        <div className="component-content">
          <div className="category-eyebrow">
            <span className="category-eyebrow__category">
              {config.categories[frontmatter.category ?? "updates"]?.title ?? config.categories.updates.title}
            </span>
            <span className="category-eyebrow__date">
              {formatDate(frontmatter.date)}
            </span>
          </div>
        </div>
      </div>
      <div className="pagetitle component">
        <div className="component-content">
          <h1 className="hero-headline">
            {frontmatter.headline ?? frontmatter.title}
          </h1>
        </div>
      </div>
      <div className="article-subhead component">
        <div className="component-content">{frontmatter.subhead}</div>
      </div>
      {author && (
        <div className="author component">
          <div className="component-content">
            <div className="author-content">
              <Image
                width="24"
                height="24"
                className="author-image"
                src={author.avatar_url}
                alt={`${author.name} user image`}
              />
              <span className="author-text">{author.name}</span>
            </div>
          </div>
        </div>
      )}
      <ShareSheet />
    </ArticleHeaderWrap>
  );
};

export default ArticleHeader;

================
File: components/pages/blog/post/index.js
================
import Head from 'next/head';
import styled from 'styled-components';
import config from '@/data/config';
import { Section } from '@/components/common/layout';
import Markdown from '@/components/common/Markdown';
import ArticleHeader from './ArticleHeader';
import ShareSheet from './ShareSheet';
import AboutAuthor from './AboutAuthor';

const Article = styled.article`
  overflow: hidden;
  padding: 64px 0;

  .component {
    margin-left: auto;
    margin-right: auto;
    max-width: 980px;
  }

  .component-content {
    margin-left: auto;
    margin-right: auto;
    max-width: 653px;

    @media only screen and (max-width: 1068px) {
      max-width: 576px;
    }
  }

  @media only screen and (max-width: 734px) {
    .pagebody + .sharesheet,
    .about-author,
    .article-header {
      margin-left: auto;
      margin-right: auto;
      width: 87.5%;
    }
  }
`;

const BlogPost = ({ frontmatter, markdownBody, author }) => {
  const title = `${frontmatter.title ?? frontmatter.headline} | ${
    config.title
  } Blog`;
  const description = frontmatter.description ?? frontmatter.subhead;

  return (
    <Section gutter={false}>
      <Head>
        <title>{title}</title>
        <meta property="og:title" content={title} />
        <meta name="description" content={description} />
        <meta property="og:description" content={description} />
        <meta
          property="og:image"
          content={frontmatter.image ?? `${config.host}}/social-preview.jpg`}
        />
        {!!frontmatter.draft && (
          <meta name="robots" content="noindex,nofollow" />
        )}
        <meta
          name="twitter:creator"
          content={frontmatter.authorTwitter ?? config.twitter}
        />
      </Head>
      <Article>
        <ArticleHeader frontmatter={frontmatter} author={author} />
        <Markdown className="pagebody component">{markdownBody}</Markdown>
        <ShareSheet />
        {author && <AboutAuthor author={author} />}
      </Article>
    </Section>
  );
};

export default BlogPost;

================
File: components/pages/blog/post/ShareSheet.jsx
================
import { useRef } from "react";
import XSvg from '@/assets/x-icon.svg';
import FacebookSvg from '@/assets/facebook-icon.svg';
import { Link, Mail } from 'react-feather';
import styled from "styled-components";

const ShareSheetWrap = styled.div`
  &.component {
    margin-top: 32px;
    margin-bottom: 40px;
  }

  button {
    background: none;
    border: 0;
    box-sizing: content-box;
    color: inherit;
    cursor: pointer;
    font: inherit;
    line-height: inherit;
    overflow: visible;
    vertical-align: inherit;
  }

  .sharesheet-options {
    display: inline-flex;
    justify-content: flex-start;
    height: 71px;
  }

  .sharesheet-options,
  .headersplitview .sharesheet-options {
    height: 42px;
    overflow: visible;
  }

   .social-option {
    position: relative;
    z-index: 2;
    list-style: none;
    opacity: 1;
    display: block;
    opacity: 0.5;
    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.25, 1) 0ms;
    &:hover {
      opacity: 1;
    }
  }

  .sharesheet-options .social-option {
    margin-top: 12px;
  }

   .social-option:first-child .social-icon {
    margin-left: -8px;
  }

   .social-option .social-icon {
    font-size: 24px;
    line-height: 24px;
    width: 24px;
    height: 24px;
    padding: 6px;
    margin-top: -6px;
    margin-bottom: -6px;
    svg {
      width: 18px;
      height: 18px;
    }
  }

  .social-option:first-child .social-icon {
    margin-left: -8px;
  }

  .sharesheet-options .social-option:first-child .social-icon {
    margin-left: -8px;
  }

  .sharesheet-options-open,
  .sharesheet-options-close {
    line-height: 1em;
    padding: 0;
  }

  .sharesheet-options-close,
  .sharesheet-options-open {
    display: none;
  }

  .sharesheet-link-container {
    display: inline-block;
    vertical-align: middle;
    margin: 0;
    overflow: hidden;
  }

  .sharesheet-link-container {
    position: absolute;
    left: 0;
    width: 100%;
    height: 1px;
    opacity: 0.01;
    background-color: #f5f5f7;
    white-space: normal;
    text-align: left;
    top: 100%;
    z-index: -1;
  }
`;

const ShareSheet = () => {
  const shareLinkInputRef = useRef();
  const shareViaMail = () => {
    var subject = 'Voxa Blog Post';
    var body = window.location.href;
    var uri = 'mailto:?subject=';
    uri += encodeURIComponent(subject);
    uri += '&body=';
    uri += encodeURIComponent(body);
    window.open(uri);
  };

  function shareViaLink() {
    navigator.clipboard.writeText(window.location.href).then(
      function (data) {
        console.log('Copying to clipboard was successful!', data);
      },
      function (err) {
        console.log('Could not copy text: ', err);
      }
    );
  }

  return (
    <ShareSheetWrap className="sharesheet component">
      <div className="component-content">
        <div className="sharesheet-content tooltip-wrapper">
          <ul className="sharesheet-options">
            <li className="social-option">
              <button
                className="icon icon-facebook social-icon"
                title="Share via Facebook"
                aria-label="Share this article via Facebook (opens in new window)"
                onClick={() =>
                  window.open(
                    `https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`
                  )
                }
              >
                <FacebookSvg />
              </button>
            </li>
            <li className="social-option">
              <button
                className="icon icon-twitter social-icon"
                title="Share via Twitter"
                aria-label="Share this article via Twitter (opens in new window)"
                onClick={() =>
                  window.open(
                    `https://x.com/intent/tweet?url=${window.location.href}`
                  )
                }
              >
                <XSvg />
              </button>
            </li>
            <li className="social-option">
              <button
                className="icon icon-mail social-icon"
                title="Share via mail"
                aria-label="Share this article via Mail (opens in new window)"
                onClick={shareViaMail}
              >
                <Mail />
              </button>
            </li>
            <li className="social-option">
              <button
                className="icon icon-link social-icon"
                title="Share via link"
                aria-label="Share via link"
                onClick={shareViaLink}
              >
                <Link />
              </button>
            </li>
          </ul>
          <div className="sharesheet-link-container" aria-hidden="true">
            <div className="sharesheet-link-content">
              <input
                ref={shareLinkInputRef}
                className="link-text"
                value={
                  typeof window !== 'undefined' ? window.location.href : ''
                }
                tabindex="-1"
                readonly=""
                aria-hidden="true"
                disabled="disabled"
              />
              <button
                className="icon icon-close sharesheet-link-close"
                title="close"
                aria-label="close link"
                tabindex="-1"
                aria-hidden="true"
                role="button"
              ></button>
            </div>
          </div>
        </div>
      </div>
    </ShareSheetWrap>
  );
};

export default ShareSheet;

================
File: components/pages/blog/index.js
================
import { Section } from '@/components/common/layout';
import Typography from '@/components/common/Typography';
import { mediaQueries } from '@/styles/breakpoints';
import Image from 'next/image';
import Link from 'next/link';
import styled from 'styled-components';

const Tiles = styled.ul`
  align-items: stretch;
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
  margin: 0;
`;
const TileItem = styled.li`
  position: relative;
  list-style: none;

  &.item-1up,
  &.item-hero,
  &.item-hero-reversed,
  &.item-hero-secondary,
  &.item-hero-highlight,
  &.item-hero-highlight-secondary,
  &.item-portrait,
  &.item-portrait-secondary,
  &.item-super-hero,
  &.item-super-hero-secondary {
    flex-basis: 100%;
  }

  &:first-child {
    &.item,
    &.item-1up,
    &.item-hero,
    &.item-hero-reversed,
    &.item-hero-secondary,
    &.item-hero-highlight,
    &.item-hero-highlight-secondary,
    &.item-super-hero,
    &.item-super-hero-secondary,
    &.item-portrait,
    &.item-portrait-secondary {
      & ~ .tile-item {
        margin-top: 36px;
        @media ${mediaQueries.md} {
          margin-top: 22px;
        }
      }
    }
  }
`;
const TileWrap = styled(Link)`
  --tile-background-color: var(--background-tertiary-color);
  --tile-color: var(--label-primary-color);
  background-color: var(--tile-background-color);
  display: flex;
  border-radius: 16px;
  overflow: hidden;
  z-index: 0;
  position: relative;

  height: 100%;

  cursor: pointer;

  &.tile-1up {
    width: 100%;
    @media ${mediaQueries.sm} {
      flex-direction: column;
    }
  }

  &.tile-1up.tile-quick-read {
    padding: 58px;
    align-items: center;
    box-sizing: border-box;
    display: flex;
  }
  &.tile-hero {
    flex-direction: row;
    width: 100%;
  }
  &.tile-hero-reversed {
    flex-direction: row-reverse;
    width: 100%;
  }
  &.tile-hero-secondary {
    flex-direction: row;
    width: 100%;
  }
  &.tile-hero-highlight {
    display: block;
    justify-content: flex-end;
    position: relative;
  }
  &.tile-hero-highlight-secondary {
    @media only screen and (min-width: 1069px) {
      display: block;
      justify-content: flex-end;
      position: relative;
    }
  }
  &.tile-super-hero {
    flex-direction: column;
    width: 100%;
  }
  &.tile-super-hero-secondary {
    flex-direction: column;
    width: 100%;
  }
  &.tile-portrait {
    flex-direction: row;
    width: 100%;
  }
  &.tile-portrait-secondary {
    flex-direction: row;
    width: 100%;
  }
  &.tile-2up {
    flex-direction: column;
    width: 472px;
    @media ${mediaQueries.md} {
      width: 333px;
    }
    @media ${mediaQueries.sm} {
      width: 100%;
    }
  }
  &.tile-3up {
    flex-direction: column;
    width: 303px;
    @media ${mediaQueries.md} {
      width: 333px;
    }
    @media ${mediaQueries.sm} {
      width: 100%;
    }
  }
`;
const TileMedia = styled.div`
  position: relative;
  z-index: 0;
  flex-grow: 0;
  flex-shrink: 0;
  overflow: hidden;

  .tile-1up & {
    width: 100%;
    height: auto;
    min-height: 362px;
    flex-basis: 643px;
    flex-shrink: 1;
    @media ${mediaQueries.md} {
      width: 100%;
      height: auto;
      min-height: 255px;
      flex-basis: 453px;
      flex-shrink: 1;
    }
    @media ${mediaQueries.sm} {
      flex-basis: auto;
      min-height: 0;
      aspect-ratio: 16/9;
    }
  }

  .tile-2up & {
    width: 100%;
    height: 266px;
    min-height: auto;
    flex-basis: auto;
    flex-shrink: 1;
    @media ${mediaQueries.md} {
      width: 100%;
      height: 187px;
      min-height: auto;
      flex-basis: auto;
      flex-shrink: 1;
    }
  }

  .tile-3up & {
    width: 100%;
    height: 170px;
    min-height: auto;
    flex-basis: auto;
    flex-shrink: 1;
  }
`;
const TileImage = styled(Image)`
  /* background-image: url(${({ src }) => src});
  background-size: cover;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0; */
  transition: transform 400ms cubic-bezier(0.4, 0, 0.25, 1) 0ms;
  width: 100%;
  height: 100%;
  object-fit: cover;

  .tile:hover & {
    transform: scale(1.03);
  }
`;
const TileDescription = styled.div`
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  flex-grow: 1;

  .tile-1up & {
    padding: 32px;
    justify-content: space-between;
    flex-basis: 0;
    @media ${mediaQueries.md} {
      padding: 24px;
    }
    @media ${mediaQueries.sm} {
      padding: 24px;
    }
  }

  .tile-2up & {
    padding: 32px;
    justify-content: space-between;
    flex-basis: auto;
    @media ${mediaQueries.md} {
      padding: 24px;
    }
    @media ${mediaQueries.sm} {
      padding: 19px;
    }
  }

  .tile-3up & {
    padding: 24px;
    justify-content: space-between;
    flex-basis: auto;
    @media ${mediaQueries.sm} {
      padding: 19px;
    }
  }
`;
const TileHead = styled.div``;
const TileCategory = styled.div`
  color: var(--label-tertiary-color);
  font-size: 12px;
  line-height: 1.33337;
  font-weight: 700;
  letter-spacing: -0.01em;
  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif;
  text-transform: uppercase;
  margin-bottom: 8px;

  .tile-1up & {
    margin-bottom: 8px;
    @media ${mediaQueries.md} {
      margin-bottom: 8px;
    }
  }
  .tile-2up & {
    margin-bottom: 8px;
    @media ${mediaQueries.md} {
      margin-bottom: 8px;
    }
  }
  .tile-3up & {
    margin-bottom: 8px;
  }
`;

const TileHeadline = styled.div`
  color: var(--label-primary-color);
  -webkit-line-clamp: 6;
  -webkit-box-orient: vertical;
  display: -webkit-box;
  overflow: hidden;

  .tile-1up & {
    font-size: 32px;
    line-height: 1.125;
    font-weight: 700;
    letter-spacing: 0.004em;
    font-family: 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
    @media ${mediaQueries.md} {
      font-size: 21px;
      line-height: 1.19048;
      font-weight: 700;
      letter-spacing: 0.011em;
      font-family: 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue',
        'Helvetica', 'Arial', sans-serif;
    }
    @media ${mediaQueries.sm} {
      font-size: 24px;
    }
  }

  .tile-2up & {
    font-size: 24px;
    line-height: 1.16667;
    font-weight: 700;
    letter-spacing: 0.009em;
    font-family: 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
    @media ${mediaQueries.md} {
      font-size: 19px;
      line-height: 1.21053;
      font-weight: 700;
      letter-spacing: 0.012em;
      font-family: 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue',
        'Helvetica', 'Arial', sans-serif;
    }
  }

  .tile-3up & {
    font-size: 19px;
    line-height: 1.21053;
    font-weight: 700;
    letter-spacing: 0.012em;
    font-family: 'SF Pro Display', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
      'Arial', sans-serif;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
  }
`;
const TileTimestamp = styled.div`
  color: var(--label-tertiary-color);
  font-size: 14px;
  line-height: 1.28577;
  font-weight: 600;
  letter-spacing: -0.016em;
  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif;
  display: flex;
  justify-content: flex-start;
  align-items: center;

  .tile-quick-read.tile-1up & {
    margin-top: 16px;
    @media ${mediaQueries.md} {
      margin-top: 12px;
    }
  }
  .tile-1up & {
    margin-top: 12px;
    @media ${mediaQueries.md} {
      margin-top: 12px;
    }
  }
  .tile-2up & {
    margin-top: 12px;
    @media ${mediaQueries.md} {
      margin-top: 8px;
    }
  }
  .tile-3up & {
    margin-top: 8px;
  }
`;
const CtaWrap = styled.div`
  display: flex;
  justify-content: center;
`;
const CtaButton = styled.button`
  border-radius: 30px;
  display: inline-block;
  transition:
    background-color 300ms cubic-bezier(0.4, 0, 0.25, 1) 0ms,
    border-color 300ms cubic-bezier(0.4, 0, 0.25, 1) 0ms,
    color 300ms cubic-bezier(0.4, 0, 0.25, 1) 0ms;
  font-size: 17px;
  line-height: 1.23536;
  font-weight: 600;
  letter-spacing: -0.022em;
  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif;
  border: 2px solid var(--label-primary-color);
  padding: 10px 24px 9px;
  border-color: var(--label-primary-color);
  color: var(--label-primary-color);
  background-color: transparent;
  cursor: pointer;
  &:hover {
    color: var(--fill);
    border-color: var(--label-primary-color);
    background-color: var(--label-primary-color);
  }
`;

const tileLayout = [1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3];

const getTileImpositionLayout = (idx) => `${tileLayout[idx] ?? 3}up`;

function formatDate(str) {
  const date = new Date(str);
  return date.toLocaleDateString('en-us', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC',
  });
}

export default function BlogPage({ posts }) {
  return (
    <>
      <Section contained gutterY variant="secondary">
        <Typography variant="section-head" as="h2">
          Latest News
        </Typography>
        <Tiles>
          {posts.map((post, idx) => {
            const tileImpositionLayout = getTileImpositionLayout(idx);

            return (
              <TileItem
                key={post.date + post.slug}
                className={`tile-item item item-${tileImpositionLayout}`}
              >
                <Tile post={post} impositionLayout={tileImpositionLayout} />
              </TileItem>
            );
          })}
        </Tiles>
      </Section>
      {posts.length > 11 && (
        <Section contained gutterBottom>
          <CtaWrap>
            <Link href="/blog/archive/">
              <CtaButton>View Archive</CtaButton>
            </Link>
          </CtaWrap>
        </Section>
      )}
    </>
  );
}

const Tile = ({ post, impositionLayout }) => {
  return (
    <TileWrap href={post.url} className={`tile tile-${impositionLayout}`}>
      <TileMedia>
        <TileImage width="643" height="362" src={post.image} alt="Post Image" />
      </TileMedia>
      <TileDescription>
        <TileHead>
          <TileCategory>{post.category}</TileCategory>
          <TileHeadline>{post.title}</TileHeadline>
        </TileHead>
        {post.date && <TileTimestamp>{formatDate(post.date)}</TileTimestamp>}
      </TileDescription>
    </TileWrap>
  );
};

================
File: components/pages/dev/grid.js
================
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import {
  Grid,
  GridItem,
  Row,
  Column,
  Section,
  Stack,
  Container,
} from '@/components/common/layout';

export default function GridPage() {
  return (
    <>
      <Section contained gutterY>
        <Row align="center">
          <Column width={{ md: 12, lg: 8 }}>
            <Stack gap>
              <Typography variant="headline-super" as="h1">
                Grid
              </Typography>
              <Typography variant="intro" color="secondary">
                A grid system based on the CSS grid display property.
              </Typography>
            </Stack>
          </Column>
        </Row>
      </Section>
      <Section contained gutterBottom>
        <Grid
          columns={{ xs: 1, sm: 2, lg: 3 }}
          rowHeight={{ sm: '16px', lg: '32px' }}
          gap={2}
        >
          <GridItem as={Tile} height={8} />
          <GridItem as={Tile} height={6} />
          <GridItem as={Tile} height={8} />
          <GridItem as={Tile} height={11} />
          <GridItem as={Tile} height={12} />
          <GridItem as={Tile} height={12} />
          <GridItem as={Tile} height={{ sm: 5, lg: 3 }} />
          <GridItem as={Tile} width={{ xs: 1, sm: 2, lg: 3 }} height={10} />
          <GridItem as={Tile} width={{ xs: 1, lg: 2 }} height={6} />
          <GridItem as={Tile} height={{ sm: 14, lg: 13 }} />
          <GridItem as={Tile} height={7} />
          <GridItem as={Tile} height={7} />
          <GridItem as={Tile} width={{ xs: 1, sm: 2, lg: 3 }} height={10} />
        </Grid>
      </Section>
      <Section gutterBottom={3}>
        <Container>
          <Typography variant="headline-reduced">Offsets</Typography>
          <Typography variant="body" gutterTop gutterBottom>
            Offset a column.
          </Typography>
        </Container>
        <Grid columns={{ xs: 4, sm: 6, lg: 8, xl: 12 }} gap={3}>
          <GridItem
            as={Tile}
            width={{ xs: 4, sm: 6, lg: 8, xl: 12 }}
            style={{ height: 300 }}
          />
          <GridItem
            as={Tile}
            width={{ xs: 4, sm: 3, lg: 4, xl: 4 }}
            style={{ height: 300 }}
          />
          <GridItem
            as={Tile}
            width={{ xs: 4, sm: 3, lg: 4, xl: 8 }}
            style={{ height: 300 }}
          />
        </Grid>
      </Section>
    </>
  );
}

================
File: components/pages/dev/layout.js
================
import styled from 'styled-components';
import Typography from '@/components/common/Typography';
import { Row, Column, Section, Stack } from '@/components/common/layout';

const Box = styled.div`
  position: relative;
  box-sizing: border-box;
  min-height: 1rem;
  margin-bottom: 0;
  background: #007fff;
  border-radius: 6px;
  overflow: hidden;
  text-align: center;
  color: #fff;
  padding: 1rem;
`;

export default function DevPage() {
  return (
    <>
      <Section contained gutterY>
        <Row align="center">
          <Column width={{ md: 12, lg: 8 }}>
            <Stack gap>
              <Typography variant="headline-super" as="h1">
                Layout
              </Typography>
              <Typography variant="intro" color="secondary">
                A layout system based on the flex display property.
              </Typography>
            </Stack>
          </Column>
        </Row>
      </Section>
      <Section contained gutterBottom>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Responsive</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              All props can take values to make the layout completely
              responsive.
            </Typography>
          </Column>
        </Row>
        <Row gap={5} gutterTop>
          <Column width={{ sm: 12, md: 3, lg: 2, xl: 1 }}>
            <Box />
          </Column>
          <Column width={{ sm: 6, md: 6, lg: 8, xl: 10 }}>
            <Box />
          </Column>
          <Column width={{ sm: 6, md: 3, lg: 2, xl: 1 }}>
            <Box />
          </Column>
        </Row>
        <Row gap={5} gutterTop>
          <Column width={{ sm: 12, md: 3, lg: 2, xl: 1 }}>
            <Box />
          </Column>
          <Column width={{ sm: 12, md: 9, lg: 10, xl: 11 }}>
            <Box />
          </Column>
        </Row>
        <Row gap={5} gutterTop>
          <Column width={{ sm: 10, md: 6, lg: 8, xl: 10 }}>
            <Box />
          </Column>
          <Column width={{ sm: 2, md: 6, lg: 4, xl: 2 }}>
            <Box />
          </Column>
        </Row>
      </Section>
      <Section contained gutterBottom>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Fluid</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              Percent based widths allow fluid resizing of columns and rows.
            </Typography>
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={12}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={1}>
            <Box />
          </Column>
          <Column width={11}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={2}>
            <Box />
          </Column>
          <Column width={10}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={3}>
            <Box />
          </Column>
          <Column width={9}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={4}>
            <Box />
          </Column>
          <Column width={8}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={5}>
            <Box />
          </Column>
          <Column width={7}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={6}>
            <Box />
          </Column>
          <Column width={6}>
            <Box />
          </Column>
        </Row>
      </Section>

      <Section contained gutterBottom>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Offsets</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              Offset a column.
            </Typography>
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={1} offset={11}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={2} offset={10}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={3} offset={9}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={4} offset={8}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={5} offset={7}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={6} offset={6}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={7} offset={5}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={8} offset={4}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={9} offset={3}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={10} offset={2}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column width={11} offset={1}>
            <Box />
          </Column>
        </Row>
      </Section>

      <Section contained gutterBottom>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Auto Width</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              Add any number of auto sizing columns to a row. Let the grid
              figure it out.
            </Typography>
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column>
            <Box />
          </Column>
          <Column>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop>
          <Column>
            <Box />
          </Column>
          <Column>
            <Box />
          </Column>
          <Column>
            <Box />
          </Column>
        </Row>
      </Section>

      <Section contained>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Align</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              Add props to align elements to the start or end of a row as well
              as the top, bottom, or center of a column
            </Typography>
          </Column>
        </Row>
        <Row gap gutterTop align="start">
          <Column width={6}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop align="center">
          <Column width={6}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop align="end">
          <Column width={6}>
            <Box />
          </Column>
        </Row>
      </Section>

      <Section contained gutterBottom>
        <Row gap>
          <Column>
            <Typography variant="headline-reduced">Distribute</Typography>
          </Column>
        </Row>
        <Row gutterTop>
          <Column>
            <Typography variant="body" gutterBottom>
              Add props to align elements to the start or end of a row as well
              as the top, bottom, or center of a column
            </Typography>
          </Column>
        </Row>
        <Row gap gutterTop distribute="around">
          <Column width={2}>
            <Box />
          </Column>
          <Column width={2}>
            <Box />
          </Column>
          <Column width={2}>
            <Box />
          </Column>
        </Row>
        <Row gap gutterTop distribute="between">
          <Column width={2}>
            <Box />
          </Column>
          <Column width={2}>
            <Box />
          </Column>
          <Column width={2}>
            <Box />
          </Column>
        </Row>
      </Section>
    </>
  );
}

================
File: components/pages/dev/typography.js
================
import { Section } from '@/components/common/layout';
import Typography from '@/components/common/Typography';

const typographyVariants = [
  'headline-standalone',
  'headline-super',
  'headline-elevated',
  'headline',
  'headline-reduced',
  'eyebrow-super',
  'eyebrow-elevated',
  'eyebrow',
  'eyebrow-reduced',
  'intro-elevated',
  'intro',
  'quote',
  'quote-reduced',
  'callout',
  'manifesto',
  'label',
  'tout',
  'body',
  'body-tight',
  'body-reduced',
  'body-reduced-tight',
  'caption',
  'sosumi',
  'headline-body',
  'headline-body-reduced',
];

export default function DevPage() {
  const message = 'The quick brown fox jumped over the lazy dog.';

  return (
    <>
      {typographyVariants.map((variant, i) => (
        <Section contained gutterTop={i === 0} gutterBottom key={variant}>
          <pre style={{ marginBottom: 12, opacity: 0.5 }}>{variant}</pre>
          <Typography variant={variant}>{message}</Typography>
        </Section>
      ))}
    </>
  );
}

================
File: components/pages/developer/index.js
================
import { Section } from '@/components/common/layout';
import Typography from '@/components/common/Typography';

export default function DeveloperPage() {
  return (
    <Section contained gutterY>
      <Typography variant="headline">Calling all Developers</Typography>
    </Section>
  );
}

================
File: components/pages/download/index.js
================
import React, { useEffect, useRef } from 'react';
import styled from 'styled-components';
import { Column, Row, Section, Stack } from '@/components/common/layout';
import Typography from '@/components/common/Typography';
import Image from 'next/image';
import Tile from '@/components/common/Tile';
import { mediaQueries } from '@/styles/breakpoints';
import config from '@/data/config.json';

const StepTile = styled(Tile)`
  overflow: hidden;
  aspect-ratio: 1/1;
  img {
    transform: translateX(-50%);
  }
  @media ${mediaQueries.md} {
    aspect-ratio: 16/7;
  }
  @media ${mediaQueries.sm} {
    aspect-ratio: 1/1;
    img {
      transform: translateX(-50%) translateY(-10%) scale(1.25);
    }
  }
  @media ${mediaQueries.xs} {
    aspect-ratio: 1/1;
    img {
      transform: translateX(-50%) translateY(10%) scale(0.9);
    }
  }
`;
const ProductIconWrap = styled.div`
  width: 128px;
  margin-left: auto;
  margin-right: auto;
`;
const StepNumber = styled.div`
  width: 1.75em;
  height: 1.75em;
  border-radius: 2.5em;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  border: 2.5px solid;
`;
const Download = styled.iframe`
  width: 0;
  height: 0;
  position: fixed;
  top: 100%;
  right: 100%;
  border: 0;
  background: transparent;
  opacity: 0;
`;

export default function DownloadPage({ downloadUrl }) {
  return (
    <>
      <Download src={downloadUrl} />
      <Section contained gutterTop>
        <Row align="center" style={{ position: 'relative', zIndex: 1 }}>
          <Column width={{ md: 12, lg: 12 }}>
            <Stack gap={2} align="center">
              <ProductIconWrap>
                <Image
                  width={128}
                  height={128}
                  src="/product-icon.png"
                  alt="Voxa product icon"
                />
              </ProductIconWrap>
              <Typography variant="headline-elevated">
                Thanks for downloading Voxa!
              </Typography>
              <Typography
                variant="intro-elevated"
                color="tertiary"
                gutterBottom
              >
                Your download will start automatically. If it didn&rsquo;t,{' '}
                <a
                  href={
                    downloadUrl ?? `${config.links.githubRepo}/releases/latest`
                  }
                  target="_blank"
                >
                  download manually
                </a>
                .
              </Typography>
            </Stack>
          </Column>
        </Row>
      </Section>
      <Section contained gutterY>
        <Row gap>
          <Column width={{ md: 12, lg: 4 }}>
            <StepTile>
              <Stack gap>
                <StepNumber>1</StepNumber>
                <Typography variant="eyebrow">
                  Open Voxa disk image in Downloads
                </Typography>
                <Image
                  width={200}
                  height={200}
                  src="/downloads-folder.png"
                  alt="Downloads folder"
                  style={{
                    position: 'absolute',
                    left: '50%',
                    bottom: -50,
                  }}
                />
              </Stack>
            </StepTile>
          </Column>
          <Column width={{ md: 12, lg: 4 }}>
            <StepTile gap>
              <Stack gap>
                <StepNumber>2</StepNumber>
                <Typography variant="eyebrow">
                  Drag the Voxa icon to Applications
                </Typography>
                <Image
                  width={256}
                  height={149}
                  src="/drag-to-applications-folder.png"
                  alt="Downloads folder"
                  style={{
                    position: 'absolute',
                    left: '50%',
                    bottom: 0,
                  }}
                />
              </Stack>
            </StepTile>
          </Column>
          <Column width={{ md: 12, lg: 4 }}>
            <StepTile>
              <Stack gap>
                <StepNumber>3</StepNumber>
                <Typography variant="eyebrow">
                  Add to dock, click to launch!
                </Typography>
                <Image
                  width={400}
                  height={120}
                  src="/drag-to-dock.png"
                  alt="Downloads folder"
                  style={{
                    position: 'absolute',
                    left: '50%',
                    bottom: 0,
                  }}
                />
              </Stack>
            </StepTile>
          </Column>
        </Row>
      </Section>
    </>
  );
}

================
File: components/pages/extensions/index.js
================
import { Section } from '@/components/common/layout';
import Typography from '@/components/common/Typography';

export default function DevPage() {
  return (
    <Section contained gutterY>
      <Typography variant="headline">Make Voxa your own</Typography>
    </Section>
  );
}

================
File: components/pages/home/sections/CtaSection.jsx
================
import styled from 'styled-components';
import Image from 'next/image';
import Typography from '@/components/common/Typography';
import { Section, Stack } from '@/components/common/layout';
import { ArrowDownCircle } from "react-feather"

const StyledSection = styled(Section)`
  background-color: #f5f5f7;
  /* color: #1d1d1f; */
  background-color: var(--background-tertiary-color);
  /* color: var(--glyph-gray-tertiary); */
  a {
    color: var(--glyph-blue);
    :hover {
      text-decoration: underline;
    }
  }
`;

export default function CtaSection() {
  return (
    <StyledSection contained gutterTop>
      <Stack gap align="center">
        <Image
          width={104}
          height={104}
          src="/product-icon.png"
          alt="Voxa product icon"
        />
        <Stack align="center" gap={1}>
          <Typography variant="eyebrow-super">Get started</Typography>
          <Typography variant="body">Download Voxa and see for yourself!</Typography>
          <Typography variant="body" as="a" href="#">Download Voxa <ArrowDownCircle size="1em" style={{ verticalAlign: "middle"}} /></Typography>
        </Stack>
      </Stack>
    </StyledSection>
  );
}

================
File: components/pages/home/sections/FeaturesSection.jsx
================
import { Sliders } from 'react-feather';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack } from '@/components/common/layout';

const FeaturesSection = () => {
  return (
    <Section contained gutterBottom>
      <Stack style={{ textAlign: 'center', marginBottom: 48 }}>
        <Typography variant="headline-reduced">Features</Typography>
        <Typography variant="intro" gutterTop>
          This is a description of the features section.
        </Typography>
      </Stack>
      <Grid columns={{ xs: 1, md: 2, lg: 3 }} gap>
        <GridItem as={Tile} width={{ xs: 1, md: 2, lg: 3 }} color="purple" gradient>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 1</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile} width={{xs: 1, lg: 2}}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 2</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile} height={{xs: 1, lg: 2}}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 4</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 2</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 3</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
      </Grid>
    </Section>
  );
}

export default FeaturesSection;

================
File: components/pages/home/sections/HeroSection.jsx
================
import Image from 'next/image';
import styled from 'styled-components';
import { Parallax } from 'react-parallax';
import Typography from '@/components/common/Typography';
import { Row, Column, Section, Stack } from '@/components/common/layout';
import Button from '@/components/common/Button';
import HeroImage from '../HeroImage';
import { useRouter } from 'next/router';
import Link from 'next/link';

const ProductIconWrap = styled.div`
  width: 128px;
  margin-left: auto;
  margin-right: auto;
`;

const HeroSection = ({ versionNumber, minimumSystemVersion }) => {
  const router = useRouter();

  return (
    <Parallax
      style={{ overflow: 'visible' }}
      renderLayer={(percentage) => {
        return (
          <Section contained gutterTop>
            <Row align="center" style={{ position: 'relative', zIndex: 1 }}>
              <Column width={{ md: 12, lg: 12 }}>
                <Stack gap={2} align="center">
                  <ProductIconWrap>
                    <Image
                      width={128}
                      height={128}
                      src="/product-icon.png"
                      alt="Voxa product icon"
                    />
                  </ProductIconWrap>
                  <Typography variant="headline-elevated">
                    A modern Discord client for macOS, built with SwiftUI. Fully Open Source.
                  </Typography>
                  <Typography variant="intro-elevated" color="tertiary" gutterBottom>
                    Voxa is a sleek, lightweight, and native macOS Discord client built using SwiftUI. Designed for speed, efficiency, and a modern user experience, it brings the best of Discord to your Mac in a fully optimized package.
                  </Typography>
                  <Button href="/download" size="lg">Download</Button>
                  <Typography variant="body-reduced" color="tertiary">{versionNumber} | macOS {minimumSystemVersion ? `${minimumSystemVersion.split(".")[0]}+` : ``}</Typography>
                </Stack>
              </Column>
            </Row>
            <Row align="center">
              <Column>
                <HeroImage percentage={percentage} />
              </Column>
            </Row>
          </Section>
        )
      }}
    />
  );
}

export default HeroSection;

================
File: components/pages/home/sections/IntroFeaturesSection.jsx
================
import { useMemo } from 'react';
import { Feather, GitHub, Info, Layout, Sliders, Tool, Zap } from 'react-feather';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack } from '@/components/common/layout';
import { useSite } from '@/components/common/Site';

const IntroFeaturesSection = () => {
  const { breakpoint } = useSite();

  const gap = useMemo(() => breakpoint === 'xs' ? 24 : 40, [breakpoint])
  
  return (
    <Section contained gutterBottom={20} variant="secondary">
      <Grid columns={{ xs: 1, lg: 2 }} gap={{ xs: 6, lg: 12 }}>
        <GridItem as={Tile} width={{ xs: 1, lg: 2 }}>
          <Stack direction={breakpoint === 'xs' ? "vertical" : "horizontal"} gap={3.5} >
            <div>
              <Info size={28} /> 
            </div>
            <Typography variant="intro">
              Voxa is crafted to complement, not replace, Discord's Official client, offering an alternative specifically for Apple platforms. Our goal is to provide every user with an exceptional experience and improved performance.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <Zap size={gap} />
            <Typography variant="intro" gutterTop>Native Frontend</Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              Voxa opts for WebKit as its frontend instead of Chromium, significantly enhancing performance and seamlessly integrating with the native macOS aesthetic.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <Feather size={gap} />
            <Typography variant="intro" gutterTop>
              Lightweight Yet Powerful
            </Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              Designed to be fast and smooth, making Voxa a joy to use. 
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <GitHub size={gap} />
            <Typography variant="intro" gutterTop>
              Completely Open Source
            </Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              Voxa is built by developers for developers. Have suggestions or want a new feature? Simply open an issue or submit a pull request.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <Sliders size={gap} />
            <Typography variant="intro" gutterTop>
              Fully Featured
            </Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              Voxa is packed with all your favorite features of your *old* Discord client, but with a fresh new look and feel.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <Layout size={gap} />
            <Typography variant="intro" gutterTop>
              Familiar &amp; Intuitive User Interface
            </Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              Voxa's UI is designed to be familiar and intuitive, Meaning no new learning.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem>
          <Stack>
            <Tool size={gap} />
            <Typography variant="intro" gutterTop>
              Easy Installer
            </Typography>
            <Typography variant="intro" style={{ opacity: .5 }}>
              We provide an easy-to-use installer for even the *clumsiest* of users. 
            </Typography>
          </Stack>
        </GridItem>
      </Grid>
    </Section>
  );
}

export default IntroFeaturesSection;

================
File: components/pages/home/sections/MoreFeaturesSection.jsx
================
import { Sliders } from 'react-feather';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack } from '@/components/common/layout';

const MoreFeaturesSection = () => {
  return (
    <Section contained gutterBottom>
      <Stack style={{ textAlign: 'center', marginBottom: 48 }}>
        <Typography variant="headline-reduced">More Features</Typography>
        <Typography variant="intro" gutterTop>
          This is a description of the features section.
        </Typography>
      </Stack>
      <Grid columns={{ xs: 1, md: 2, lg: 3 }} gap>
        <GridItem as={Tile} width={{ xs: 1, md: 2, lg: 3 }} color="pink" gradient>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 1</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile} height={{ xs: 1, lg: 2 }}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 4</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 2</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 3</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile} width={{ xs: 1, lg: 2 }}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 2</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
      </Grid>
    </Section>
  );
}

export default MoreFeaturesSection;

================
File: components/pages/home/sections/SampleStorySection.jsx
================
import styled from 'styled-components';
import { Sliders } from 'react-feather';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack, Row, Column } from '@/components/common/layout';
import getSpacing from '../../../../styles/spacing';
import Image from 'next/image';

const SectionIntro = styled(Row)`
  margin-top: ${getSpacing(16)};
  margin-bottom: ${getSpacing(10)};
`;
const SectionHeader = styled.header`
  padding: 0 ${getSpacing(5)};
`;
const SectionFeature = styled(Stack)`
  margin-top: ${getSpacing(8)};
`;
const ImageWrap = styled.div`
  aspect-ratio: 1391/702;
  position: relative;
  margin: 0 -40px -40px -40px;
  background: url(/window-dark-cropped.png) top left no-repeat;
  background-size: 1391px 702px;
`;

const WhyUsSection = () => {
  return (
    <Section contained="lg" gutterTop gutterBottom={20} style={{ background: 'var(--fill-tertiary-alt)' }}>
      <SectionIntro>
        <Column width={7}>
          <SectionHeader>
            <Typography variant="headline-elevated">
              Designed to help your&nbsp;work&nbsp;flow.
            </Typography>
            <Typography variant="intro-elevated" gutterTop>
              The world’s fastest editor has a completely reimagined design, making Voxa more immersive and customizable than ever. And with a streamlined user interface, you’ve got new tools for keeping track of what’s important — and for clearing some headspace when you need it most.
            </Typography>
          </SectionHeader>
        </Column>
      </SectionIntro>
      <SectionFeature gap={4} style={{ '--section-accent-color': 'var(--tomato)'}}>
        <SectionHeader>
          <Typography variant="headline" style={{ color: 'var(--section-accent-color)' }}>Navigator</Typography>
        </SectionHeader>
        <Grid columns={{ xs: 4, md: 6, lg: 8, xl: 12 }} gap>
          <GridItem
            as={Tile}
            width={{ xs: 4, md: 6, lg: 8, xl: 12 }}
            headline="Compact tab bar"
            copy="The compact tab bar option takes up less space on the page and takes on the color of the site you’re on, extending the web page to the edge of the window. Tabs have been combined with the Smart Search field, giving you access to powerful Safari features with the click of a tab."
            overlayCopy="The future of Mac isn’t just bright — it’s intelligent. Shortcuts build on the capabilities of the Automator app. Now you can modernize and convert your existing Automator workflows into shortcuts."
            violator="Coming Soon"
          >
            <ImageWrap />
          </GridItem>
          <GridItem 
            as={Tile} 
            width={6}
            headline="Tab Groups"
            copy="Save and organize your tabs in the way that works best for you. Name your Tab Groups, edit them, and switch between them as you go from one interest to the next. You can even drag your groups into an email and the links effortlessly appear as an easy‑to‑share list."
          />
          <GridItem 
            as={Tile} 
            width={6}
            headline="Access Tab Groups anywhere"
            copy="Tab Groups seamlessly sync across your Apple devices, so you can easily pick back up whenever and wherever you want."
          />
        </Grid>        
      </SectionFeature>
      <SectionFeature gap={4}>
        <SectionHeader>
          <Typography variant="headline" style={{ color: 'var(--section-accent-color)' }}>Inspector</Typography>
        </SectionHeader>
        <Grid columns={{ xs: 4, md: 6, lg: 8, xl: 12 }} gap>
          <GridItem
            as={Tile}
            width={{ xs: 4, md: 6, lg: 8, xl: 12 }}
            headline="Compact tab bar"
            copy="The compact tab bar option takes up less space on the page and takes on the color of the site you’re on, extending the web page to the edge of the window. Tabs have been combined with the Smart Search field, giving you access to powerful Safari features with the click of a tab."
            overlayCopy="The future of Mac isn’t just bright — it’s intelligent. Shortcuts build on the capabilities of the Automator app. Now you can modernize and convert your existing Automator workflows into shortcuts."
            violator="Coming Soon"
          >
            <ImageWrap />
          </GridItem>
          <GridItem 
            as={Tile} 
            width={4}
            headline="Tab Groups"
            copy="Save and organize your tabs in the way that works best for you. Name your Tab Groups, edit them, and switch between them as you go from one interest to the next. You can even drag your groups into an email and the links effortlessly appear as an easy‑to‑share list."
            color="blue"
            gradient
          />
          <GridItem 
            as={Tile} 
            width={4}
            headline="Access Tab Groups anywhere"
            copy="Tab Groups seamlessly sync across your Apple devices, so you can easily pick back up whenever and wherever you want."
          />
          <GridItem 
            as={Tile} 
            width={4}
            headline="Access Tab Groups anywhere"
            copy="Tab Groups seamlessly sync across your Apple devices, so you can easily pick back up whenever and wherever you want."
          />
        </Grid>        
      </SectionFeature>
      
    </Section>
  );
}

export default WhyUsSection;

================
File: components/pages/home/sections/WhyUsSection.jsx
================
import { Sliders } from 'react-feather';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import { Grid, GridItem, Section, Stack } from '@/components/common/layout';

const WhyUsSection = () => {
  return (
    <Section contained gutterBottom>
      <Stack style={{ textAlign: 'center', marginBottom: 48 }}>
        <Typography variant="headline-reduced">Why Voxa?</Typography>
        <Typography variant="intro" gutterTop>
          This is a description of the why Voxa section.
        </Typography>
      </Stack>
      <Grid columns={{ xs: 1, md: 2, lg: 3 }} gap>
        <GridItem
          as={Tile}
          color="blue"
          gradient
          width={{ xs: 1, md: 2, lg: 3 }}
          data-color-scheme="dark"
        >
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 1</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 2</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile} height={{ md: 2, lg: 1 }}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 3</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
        <GridItem as={Tile}>
          <Stack gap={2}>
            <Sliders />
            <Typography variant="eyebrow">Feature Title 4</Typography>
            <Typography variant="body">
              This is a description for this feature.
            </Typography>
          </Stack>
        </GridItem>
      </Grid>
    </Section>
  );
}

export default WhyUsSection;

================
File: components/pages/home/HardwareLockup.jsx
================
import Image from 'next/image';
import styled from 'styled-components';
import { useSite } from '@/components/common/Site';

const HardwareLockupWrap = styled.div`
  display: flex;
  align-items: flex-start;
  justify-content: center;
  position: relative;
  aspect-ratio: 1204/736;
  width: auto;
  @supports ((-webkit-mask-image:url("")) or (mask-image:url(""))) {
    mask-size: contain;
    /* mask-position: center; */
    mask-repeat: no-repeat;
    mask-image: url(/m1_laptop_hw_shape_mask_large.png);
  }
  @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 1.5dppx) {
    @supports ((-webkit-mask-image:url("")) or (mask-image:url(""))) {
        mask-image: url(/m1_laptop_hw_shape_mask_large_2x.png);
    }
  }
`
const HardwareImage = styled.div`
  display: block;
  aspect-ratio: 1204/736;
`
const HardwareLockupMedia = styled.div`
  display: block;
  aspect-ratio: 984/636;
  position: absolute;
  top: 2.3%;
  left: 9.3%;
  right: 9.3%;
  @supports ((-webkit-mask-image:url("")) or (mask-image:url(""))) {
    mask-size: contain;
    /* mask-position: center; */
    mask-repeat: no-repeat;
    mask-image: url(/m1_laptop_hw_mask_large.png);
  }
  @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 1.5dppx) {
    @supports ((-webkit-mask-image:url("")) or (mask-image:url(""))) {
        mask-image: url(/m1_laptop_hw_mask_large_2x.png);
    }
  }
`

const HardwareLockup = (props) => {
  const { colorScheme = "light" } = useSite();

  return (
    <HardwareLockupWrap {...props}>
      <HardwareImage>
        <Image src={`/m1_laptop_hw_${colorScheme}_large_2x.jpg`} alt="hardware image" width="1204" height="736" />
      </HardwareImage>
      <HardwareLockupMedia>
        <Image src={`/screen_macos_desktop_${colorScheme}_large_2x.jpg`} alt="image" width="984" height="636" />
      </HardwareLockupMedia>
    </HardwareLockupWrap>
  )
}

export default HardwareLockup;

================
File: components/pages/home/HeroImage.jsx
================
import styled, { css, keyframes } from "styled-components"
import Image from "next/image";
import HardwareLockup from "./HardwareLockup";
import { useSite } from '@/components/common/Site';
import { mediaQueries } from '@/styles/breakpoints';

const slideIn = keyframes`
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
`;
const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
const scaleBlurIn = keyframes`
  from {
    opacity: 0;
    transform: scale(0.75);
    filter: blur(32px);
  }
  to {
    opacity: 1;
    transform: scale(1);
    filter: blur(0);
  }
`;

const SceneWrap = styled.div`
  position: relative;
  animation: ${scaleBlurIn} 500ms 750ms cubic-bezier(0.0, 0.0, 0.2, 1);
  animation-fill-mode: both;
  transform-origin: bottom center;
  margin-top: 6%;
  img {
    position: relative;
    width: 100%;
    height: auto;
  }
`;
const ImageWrap = styled.div`
  position: relative;
  max-width: 988px;
  margin: 0 auto;
  z-index: 1;
  @media ${mediaQueries.md} {
    width: 82%;
  }
`;
const BlurBackground = styled.div`
  backdrop-filter: blur(15px);
  position: absolute;
  top: 2.5%;
  right: 3%;
  bottom: 8%;
  left: 3%;
  border-radius: 1%;

`;
const colorFlairPiece = css`
  position: absolute;
  top: 0;
  left: 0;
  width: 200px;
  height: 200px;

  @media ${mediaQueries.md} {
    width: 20vw;
    height: 20vw;
    filter: blur(10vw);
  }

  border-radius: 50%;
  background: #4F95FF;
  transform-origin: bottom center;
`;
const ColorFlair = styled.div`
  ${colorFlairPiece}
  animation: ${rotate} 5000ms linear infinite;
  filter: blur(100px);
  &:before {
    content: "";
    display: block;
    ${colorFlairPiece};
    background: #B120BD;
    top: 50%;
    left: auto;
    right: 50%;
  }
  &:after {
    content: "";
    display: block;
    ${colorFlairPiece};
    background: #44CEE3;
    top: 50%;
    left: 50%;
  },
`;
const ColorFlair1 = styled(ColorFlair)`
  && {
    top: 0px;
    left: 100px;
    animationDuration: 4000ms;
  }
`;
const ColorFlair2 = styled(ColorFlair)`
  && {
    top: -100px;
    left: calc(50% - 100px);
    animation-duration: 6000ms;
    animation-direction: reverse;
  }
`;
const ColorFlair3 = styled(ColorFlair)`
  && {
    top: 0px;
    left: auto;
    right: 100px;
    animation-duration: 5000ms;
  }
`;
const StyledHardwareLockup = styled(HardwareLockup)`
  margin-top: -45%;
  margin-left: -112px;
  margin-right: -112px;
  @media ${mediaQueries.md} {
    margin-top: -37%;
    margin-left: 0;
    margin-right: 0;
  }
`

const HeroImage = ({ percentage }) => {
  const { colorScheme = "light", breakpoint } = useSite();
  const adjustedPercentage = (Math.min(Math.max(percentage - ( breakpoint === 'xs' ? .2 : 0), 1), 1.2) - 1) * 5;

  return (
    <SceneWrap>
      <ColorFlair1 />
      <ColorFlair2 />
      <ColorFlair3 />
      <ImageWrap style={{ transform: `translateY(${adjustedPercentage * 12.5}%) scale(${1 + (1 - adjustedPercentage) * .1})` }}>
        <BlurBackground />
        <Image
          width={987.275}
          height={580.75}
          src={`/codeedit-window-${colorScheme}.png`}
          alt="Voxa screenshot"
        /> 
      </ImageWrap>
      <StyledHardwareLockup style={{ opacity: adjustedPercentage, transform: `translateY(-${adjustedPercentage * 15}%)  scale(${1 + (1 - adjustedPercentage) * -.1})` }} />
    </SceneWrap>
  )
}

export default HeroImage;

================
File: components/pages/home/index.js
================
import Ribbon from '@/components/common/Ribbon';
import { SectionDivider } from '@/components/common/layout';

import HeroSection from './sections/HeroSection';
import SocialSection from '../../common/SocialSection';
import IntroFeaturesSection from './sections/IntroFeaturesSection';
import WhyUsSection from './sections/WhyUsSection';
import MoreFeaturesSection from './sections/MoreFeaturesSection';
import FeaturesSection from './sections/FeaturesSection';
import CtaSection from './sections/CtaSection';

import SampleStorySection from './sections/SampleStorySection';
import config from '@/data/config';
import Head from 'next/head';

export default function HomePage(props) {
  return (
    <>
      <Ribbon onClick={() => window.open(config.links.githubProject)}>
        Voxa is currently in development, and so is this website. Check out the roadmap.
      </Ribbon>
      <HeroSection {...props} />
      <IntroFeaturesSection />
      {/* <SampleStorySection /> */}
      {/* <SampleStorySection /> */}
      {/* <WhyUsSection />
      <FeaturesSection />
      <MoreFeaturesSection />
      <SectionDivider contained /> */}
      {/* <SocialSection /> */}
      {/* <CtaSection /> */}
    </>
  );
}

================
File: components/pages/legal/license/index.js
================
import { Section } from '@/components/common/layout';

export default function LicensePage() {
  return (
    <>
      <Section contained gutterY>
        License page
      </Section>
    </>
  );
}

================
File: components/pages/legal/privacy/index.js
================
import { Section } from '@/components/common/layout';

export default function PrivacyPage() {
  return (
    <>
      <Section contained gutterY>
        Privacy page
      </Section>
    </>
  );
}

================
File: components/pages/legal/tos/index.js
================
import { Section } from '@/components/common/layout';

export default function TosPage() {
  return (
    <>
      <Section contained gutterY>
        TOS Page
      </Section>
    </>
  );
}

================
File: components/pages/resources/index.js
================
import { Section } from '@/components/common/layout';

export default function ResourcesPage() {
  return (
    <Section contained gutterY>
      Resources Page
    </Section>
  );
}

================
File: components/pages/whats-new/index.js
================
import React from 'react';
import styled from 'styled-components';
import { Section } from '@/components/common/layout';
import Typography from '@/components/common/Typography';
import Button from '@/components/common/Button';
import { Menu, MenuItem } from '@/components/common/Menu';
import { ChevronDown } from 'react-feather';
import { useRouter } from 'next/router';
import Release from './Release';

const HeroSection = styled(Section)`
  text-align: center;
`;
const HeroIntro = styled(Typography)`
  width: 75%;
  margin-left: auto;
  margin-right: auto;
`;
const HighlightedText = styled.span`
  position: relative;
  -webkit-text-fill-color: #0000;
  background: linear-gradient(120deg, #a972ff, #2997ff 50%, #43b9b9);
  -webkit-background-clip: text;
  background-clip: text;
  color: #2997ff;
  [data-color-scheme='dark'] & {
    text-shadow: 0 0 0.75em #2997ff;
  }
`;

export default function WhatsNewPage({ releases }) {
  const router = useRouter();
  return (
    <>
      <HeroSection contained gutterY={12}>
        <Typography variant="headline-elevated" as="h1">
          What’s <HighlightedText>New</HighlightedText>
        </Typography>
        <HeroIntro variant="intro-elevated" gutter>
          Learn about the latest features available for Voxa. For detailed
          information on updates in the latest released versions, visit the{' '}
          <a href="https://www.github.com/plyght/Voxa/releases">
            Voxa Release Notes
          </a>
          .
        </HeroIntro>
        <Menu
          placement="bottom"
          trigger={() => (
            <Button>
              Jump to version
              <ChevronDown />
            </Button>
          )}
        >
          {releases.map((release) => (
            <MenuItem
              key={`jump-to-${release.id}`}
              onClick={() => {
                router.replace(`#${release.name}`);
              }}
            >
              {release.name}
            </MenuItem>
          ))}
        </Menu>
      </HeroSection>
      {releases.map((release, i) => (
        <Release release={release} latest={i === 0} key={release.id} />
      ))}
    </>
  );
}

================
File: components/pages/whats-new/RawRelease.jsx
================
import styled from 'styled-components';
import Markdown from '@/components/common/Markdown';
import Head from 'next/head';

const StyledMarkdown = styled(Markdown)`
  img:first-child {
    display: none;
  }
  padding: 10px;
  img {
    width: 100%;
  }
  p,
  ul,
  ol,
  li {
    font-size: 14px;
  }

  h2 {
    font-size: 24px;
  }
  & img,
  & video,
  & iframe {
    margin-bottom: 10px;
  }

  & > * {
    max-width: 100%;
  }
  & > *:last-child {
    margin-bottom: 0;
  }
`;

const RawRelease = ({ release }) => {
  if (!release) return <div>No Release Found</div>;
  
  return (
    <>
      <Head>
        <meta name="robots" content="noindex"></meta>
      </Head>
      <StyledMarkdown>{release.body}</StyledMarkdown>
    </>
  );
};

export default RawRelease

================
File: components/pages/whats-new/Release.jsx
================
import React from 'react';
import styled from 'styled-components';
import {
  Section,
  SectionDivider,
  Row,
  Column,
  Stack,
} from '@/components/common/layout';
import Tile from '@/components/common/Tile';
import Typography from '@/components/common/Typography';
import Button from '@/components/common/Button';
import IconButton from '@/components/common/IconButton';
import { TileViolator } from '@/components/common/Tile';
import { Menu, MenuItem, MenuDivider } from '@/components/common/Menu';
import Markdown from '@/components/common/Markdown';
import { Link, Mail, Share } from 'react-feather';
import XSvg from '@/assets/x-icon.svg';
import FacebookSvg from '@/assets/facebook-icon.svg';
import macOSVersions from '@/data/macOS-versions';
import getMinimumSystemVersion from '@/utils/getMinimumSystemVersion';

const ReleaseTile = styled(Tile)`
  border-radius: 18px;
  & > div {
    padding: 30px;
  }
`;
const ReleaseNameLink = styled.a`
  color: inherit;
  position: relative;
  &:after {
    content: '\\00a0#';
    font-weight: 400;
    opacity: 0;
  }
  &:hover {
    opacity: 0.75;
    &:after {
      opacity: 0.33;
    }
  }
`;
const StyledMarkdown = styled(Markdown)`
  img {
    width: 100%;
  }
`;

function formatDate(fullDate) {
  const date = new Date(fullDate);
  return date.toLocaleDateString('en-us', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(
    function (data) {
      console.log('Copying to clipboard was successful!', data);
    },
    function (err) {
      console.log('Could not copy text: ', err);
    }
  );
}

const sendInEmail = (name, url) => {
  var subject = `CodeEdit Release ${name}`;
  var body = url;
  var uri = 'mailto:?subject=';
  uri += encodeURIComponent(subject);
  uri += '&body=';
  uri += encodeURIComponent(body);
  window.open(uri);
};

const Release = ({ release, latest }) => {
  const appAsset = release.assets?.filter((asset) =>
    /^CodeEdit.*\.dmg$/.test(asset.name)
  )?.[0];

  let releaseUrl = '';

  if (typeof window !== 'undefined') {
    releaseUrl = `${window.location.href.split('#')[0]}#${release.name}`;
  }

  const versionNumber = getMinimumSystemVersion(release.body);
  const versionName = versionNumber
    ? macOSVersions[versionNumber.split('.')[0]]
    : null;

  return (
    <React.Fragment>
      <SectionDivider contained />
      <Section contained gutterTop gutterBottom id={release.name}>
        <Row gap={5}>
          <Column width={{ sm: 12, lg: 4 }}>
            <Stack gap={2} style={{ position: 'sticky', top: 96 }}>
              <ReleaseTile>
                <Stack gap>
                  <Stack align="start" gap={1}>
                    {latest && <TileViolator>Latest</TileViolator>}
                    <Typography variant="eyebrow-super" as="h3">
                      <ReleaseNameLink href={`#${release.name}`}>
                        {release.name}
                      </ReleaseNameLink>
                    </Typography>
                    <Typography
                      as="span"
                      variant="body-reduced"
                      color="tertiary"
                    >
                      Released on {formatDate(release.published_at)}
                    </Typography>
                  </Stack>
                  <Stack
                    direction="horizontal"
                    align="center"
                    distribute="space-between"
                    style={{ width: '100%' }}
                  >
                    {appAsset && (
                      <Button href={appAsset.browser_download_url}>
                        Download
                      </Button>
                    )}
                    <Menu
                      trigger={() => (
                        <IconButton>
                          <Share />
                        </IconButton>
                      )}
                    >
                      <MenuItem
                        icon={Link}
                        onClick={() => {
                          copyToClipboard(releaseUrl);
                        }}
                      >
                        Copy Link
                      </MenuItem>
                      <MenuDivider />
                      <MenuItem
                        icon={FacebookSvg}
                        onClick={() =>
                          window.open(
                            `https://www.facebook.com/sharer/sharer.php?u=${releaseUrl}`
                          )
                        }
                      >
                        Share on Facebook
                      </MenuItem>
                      <MenuItem
                        icon={XSvg}
                        onClick={() =>
                          window.open(
                            `https://x.com/intent/tweet?url=${releaseUrl}`
                          )
                        }
                      >
                        Post on X
                      </MenuItem>
                      <MenuItem
                        icon={Mail}
                        onClick={() =>
                          sendInEmail(release.name, releaseUrl)
                        }
                      >
                        Send in Email
                      </MenuItem>
                    </Menu>
                  </Stack>
                </Stack>
              </ReleaseTile>
              {versionNumber && (
                <Typography
                  variant="caption"
                  color="tertiary"
                  style={{ margin: '0 30px' }}
                >
                  Requires macOS {versionName} ({versionNumber}) or newer
                </Typography>
              )}
            </Stack>
          </Column>
          <Column width={{ sm: 12, lg: 8 }}>
            <StyledMarkdown>{release.body}</StyledMarkdown>
          </Column>
        </Row>
      </Section>
    </React.Fragment>
  );
}

export default Release;

================
File: data/blog/demo.md
================
---
title: Explore what is possible with a comprehensive markdown demo
description: Overview of the markdown rendering in GitHub.
headline: Explore everything that is currently possible with a comprehensive markdown demonstration
subhead: A complete overview of the markdown rendering inspired by GitHub on our blog.
date: 2023-12-15
category: update
author: austincondiff
image: https://github.com/CodeEditApp/codeedit.app/assets/806104/6552453d-c31c-48f3-ae0f-862db07ada9c
draft: true
---

<img class="full-width ratio-21-9" src="https://github.com/CodeEditApp/codeedit.app/assets/806104/6552453d-c31c-48f3-ae0f-862db07ada9c" alt="">

## Headings

You can use up to up to six levels by writing `#` at the start of a line. The number of hashtags defines the hierarchy of the heading. The first two headings render with a horizontal separator.

```Markdown
# First level
## Second level
### Third level
#### Fourth level
##### Fifth level
###### Sixth level
```

## Video

<figure>
  <video class="full-width ratio-3-1" autoplay playsinline muted loop controls>
    <source src="https://github.com/CodeEditApp/CodeEdit/assets/806104/89de4093-6370-488d-b74d-8499723d8ac5" type="video/mp4">
  </video>
  <figcaption>This is a video description</figcaption>
</figure>

<iframe class="wide" src="https://www.youtube.com/embed/nAchMctX4YA?si=K6HkdBhN5G9-G8Ni" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<blockquote data-theme="dark" class="twitter-tweet"><p lang="en" dir="ltr">📣 Calling all passionate <a href="https://twitter.com/hashtag/Swift?src=hash&amp;ref_src=twsrc%5Etfw">#Swift</a> devs! We invite you to shape the future of code editing. Join us in contributing to a free and <a href="https://twitter.com/hashtag/OpenSource?src=hash&amp;ref_src=twsrc%5Etfw">#OpenSource</a> project to build a native <a href="https://twitter.com/hashtag/CodeEditor?src=hash&amp;ref_src=twsrc%5Etfw">#CodeEditor</a> that unleashes the power of the Mac and complements Xcode.<a href="https://t.co/1gLjzN3tul">https://t.co/1gLjzN3tul</a></p>&mdash; CodeEdit (@CodeEditApp) <a href="https://twitter.com/CodeEditApp/status/1669723002832044034?ref_src=twsrc%5Etfw">June 16, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

### Linking to Headings
In Markdown documents, each heading has its name as the identifier which you can [link to](#linking-to-headings) via a fragment.

```Markdown
[link to](#linking-to-headings)
```

## Emphasize
Emphasize text with different meanings.

### Bold
Use double astersik or double underscore before and after text to denote **bold**.

```Markdown
**bold**
__bold__
```

### Italic
Use single asterisk or underscore before and after text to denote *italic*.

```Markdown
*italic*
_italic_
```

### Strikethrough
Use double tildes before and after text to ~~strikethrough~~.

```Markdown
~~strikethrough~~
```

## Paragraphs
Use a blank line to separate one or more lines of text.

```Markdown
a paragraph

another paragraph
```

## Line Breaks
Use a backslash or two or more spaces at the end of a line, then type return to define a line break.

> [!NOTE]  
> This works inconsistently in Markdown documents versus comments. In a comment, a soft line break (return) does render a line break.

first line\
second line

```Markdown
first line\
second line
```

## Images


### Small image

![](https://picsum.photos/300/200)

```Markdown
![](https://picsum.photos/300/200)
```

### Normal image

![](https://picsum.photos/1800/1200)

```Markdown
![](https://picsum.photos/1800/1200)
```

### Wide image

<img class="wide" src="https://picsum.photos/2400/1600" />

```Markdown
<img class="wide" src="https://picsum.photos/2400/1600" />
```

### Full width image

<img class="full-width" src="https://picsum.photos/3200/1600" />

```Markdown
<img class="full-width" src="https://picsum.photos/3200/1600" />
```

### Small image with caption

<figure>
  <img src="https://picsum.photos/300/200" />
  <figcaption class="centered">A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>

```Markdown
<figure>
  <img src="https://picsum.photos/300/200" />
  <figcaption class="centered">A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>
```

### Normal image with caption

<figure>
  <img src="https://picsum.photos/1800/1200" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>

```Markdown
<figure>
  <img src="https://picsum.photos/1800/1200" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>
```

### Wide image with caption

<figure>
  <img class="wide" src="https://picsum.photos/2400/1600" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>

```Markdown
<figure>
  <img class="wide" src="https://picsum.photos/2400/1600" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>
```

### Full width image with caption

<figure>
  <img class="full-width" src="https://picsum.photos/3200/1600" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>

```Markdown
<figure>
  <img class="full-width" src="https://picsum.photos/3200/1600" />
  <figcaption>A descriptive caption about the above image goes here to give the user more context about it.</figcaption>
</figure>
```

## Code

### Inline Code Block
Use a backtick before and after text to denote as `inline code`.

```Markdown
`code`
```

### Fenced Code Block
Use three backticks in a separate line before and after `code` or add at least four spaces to the start of a line.

````Markdown
```
code
```
````

```Markdown
code
```

### Syntax Highlighting
Add syntax highlighting by specifying a language next to the backticks before a fenced code block.

````Markdown
```javascript
function markdownRocks() {
  return true
}
```
````

### Escaping Backticks

Inline code blocks can be escaped using double backticks. Fenced code blocks using backticks can be escaped using three tildes `~~~` or four backticks `` ```` ``.

## Blockquotes
Add a greater-than sign in front of a paragraph.

> To create a blockquote.

```Markdown
> a quoted pragraph
> 
> another quoted paragraph
```

Or if you want to make the quote wide.

<blockquote class="wide">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
</blockquote>

```Markdown
<blockquote class="wide">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
</blockquote>
```

If you want to make the quote full width.

<blockquote class="full-width">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
</blockquote>

```Markdown
<blockquote class="full-width">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
</blockquote>
```

### Blockquote Footer

Add a blockquote footer to credit the author.

<blockquote>
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
  <footer>Steve Jobs, Apple Computers</footer>
</blockquote>

```Markdown
<blockquote>
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
  <footer>Steve Jobs, Apple Computers</footer>
</blockquote>
```

It even works with width classes.

<blockquote class="wide">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
  <footer>Steve Jobs, Apple Computers</footer>
</blockquote>

```Markdown
<blockquote class="wide">
  <p>An important quote that we want to call the readers attention to and emphasize in our article from the rest of the content.</p>
  <p>This is another quoted paragraph that we want to emphasize.</p>
  <footer>Steve Jobs, Apple Computers</footer>
</blockquote>
```

### Nested Blockquotes
Add two greater-than signs in front of the paragraph you want to nest.

> a quoted paragraph
>> a quoted paragraph inside a quotation

```Markdown
> a quoted paragraph
>> a quoted paragraph inside a quotation
```

## Lists

### Numbered List
Add a figure followed by period, then a space and your content for each line item. The figure of the first item defines the sequence, figures of the following lines won't be considered.

1. numbered list item
2. numbered list item
3. numbered list item

```Markdown
1. numbered list item
2. numbered list item
3. numbered list item
```

### Bulleted Lists
Add an asterisk, dash or plus sign followed by period, then a space and your content for each line item.

* bulleted list item
* bulleted list item
* bulleted list item

```Markdown
* bulleted list item
* bulleted list item
* bulleted list item
```

### Task Lists
Add a dash followed by a space, then brackets **with a space in between**, then another space and your content for each task.

- [ ] Unfinished task list item
- [x] Finished task list item

```Markdown
- [ ] Unfinished task list item
- [x] Finished task list item
```

### Nesting Lists
Add two spaces to indent a list item and another two spaces for every next level. You can use up to ten levels. Mixing numbered and bulleted lists is possible.

* first level
  * second level

```Markdown
* first level
  * second level

1. first level
  1. second level

* first level unordered list item
  1. second level ordered list item
```

## Links
Add the text in brackets, then add the path or URL in parentheses.

```Markdown
[this is a link](http://github.com/)
```

## Images
Add an exclamation mark, followed by alt text in brackets, and the path or URL to the image asset in parentheses.

> [!NOTE]  
> The output automatically wraps the image in a link leading to the image url if no link is specified.

```Markdown
![alt text](http://github.com/image.jpg)
```

_For accessibility reasons, make sure the alt text describes the image content precisely!_

### Linking images
Add a link to an image by enclosing the Markdown for the image in brackets, and then add the link in parentheses.

```Markdown
[![alt text](http://github.com/image.jpg)](http://github.com/image.jpg)
```

## Footnotes

Add a footnote in square brackets preceded by a caret and an identifier[^1]. The footnote content can be added by using the before mentioned construct followed by colon and then the content.

[^1]: Identifiers can be numbers or words without spaces or tabs.

```Markdown
Text with a footnote[^1].

[^1]: The footnote can be defined anywhere in the document but will be rendered at the end.
```

## Tables
Create a table by denoting each cell with pipe characters. Use three or more hyphens in the second row to create each column, this is mandatory. 

| column 1 | column 2 |
| -------- | -------- |
| cell     | cell     |
| cell     | cell     |

```Markdown
| column 1 | column 2 |
| -------- | -------- |
| cell     | cell     |
| cell     | cell     |
```

### Alignment
Add a colon to the left, right, or on both side of the hyphens in the second row to align text of the columns accordingly.

| column 1 | column 2 | column 3 |
| :------- | :------: | -------: |
| left     |  center  |    right |
| left     |  center  |    right |

```Markdown
| column 1 | column 2 | column 3 |
| :------- | :------: | -------: |
| left     |  center  |    right |
| left     |  center  |    right |
```

### Formatting Text
You can [emphasize](#Emphasize) text, add [links](#Links), [images](#Images) and [inline code blocks](#Inline-Code-Blocks) in tables.

## Horizontal Rules
Use three or more asterisks, dashes, or underscores alone on a line.

---

```Markdown
---
***
___
```

## Alerts

Alerts emphasize critical information. They are displayed with distinctive colors and icons to indicate the importance of the content.

> [!NOTE]
> Highlights information that users should take into account, even when skimming.

> [!TIP]
> Optional information to help a user be more successful.

> [!IMPORTANT] 
> Crucial information necessary for users to succeed.

> [!WARNING]
> Critical content demanding immediate user attention due to potential risks.

> [!CAUTION]
> Negative potential consequences of an action.

```markdown
> [!NOTE]
> Highlights information that users should take into account, even when skimming.

> [!TIP]
> Optional information to help a user be more successful.

> [!IMPORTANT]
> Crucial information necessary for users to succeed.

> [!WARNING]
> Critical content demanding immediate user attention due to potential risks.

> [!CAUTION]
> Negative potential consequences of an action.
```

## Mermaid Diagrams
Code blocks with the syntax highlighting set to `mermaid` renders dynamical diagrams using the [Mermaid syntax](https://mermaid.js.org/syntax/classDiagram.html).

```mermaid
stateDiagram
    direction LR
    Input --> Blackbox
    Blackbox --> Output
    state Blackbox {
      direction LR
      🪄 
    }
```

````
```mermaid
stateDiagram
    direction LR
    Input --> Blackbox
    Blackbox --> Output
    state Blackbox {
      direction LR
      🪄 
    }
```
````

================
File: data/blog/starter-post.md
================
---
title: Starter post title
description: Description for SEO
headline: This is a longer starter post title
subhead: Longer description to show underneath headline at the top of the post
date: 2024-01-20
category: update
author: austincondiff
image: https://github.com/CodeEditApp/codeedit.app/assets/806104/6552453d-c31c-48f3-ae0f-862db07ada9c
draft: true
---

![image](https://github.com/CodeEditApp/codeedit.app/assets/806104/6552453d-c31c-48f3-ae0f-862db07ada9c)

This is some body text.

## Heading 2

### Heading 3

Here is some more body text. Check out this inline `code`.

> [!NOTE]
> This is a note.

```javascript
alert("Look, it's a codeblock")
```

For more examples, check out the blog [demo](/blog/demo).

================
File: data/config.json
================
{
  "host": "https://voxa.peril.lol",
  "title": "Voxa",
  "description": "Voxa, A modern Discord client for macOS, built with SwiftUI. Fully Open Source.",
  "repositoryUrl": "https://github.com/voxa-org/voxa",
  "twitter": "@plyght__",
  "pages": {
    "/": {
      "title": "Overview",
      "description": "A modern Discord client for macOS, built with SwiftUI. Fully Open Source."
    },
    "/whats-new": {
      "title": "What's New",
      "description": "Discover the newest updates, features, and bug fixes in Voxa's latest releases. Explore what's new and download builds for any version."
    },
    "/blog": {
      "title": "Blog",
      "description": "The Voxa blog is the source for news about Voxa. Read project news, get updates, and read about community progress."
    },
    "/download": {
      "title": "Download",
      "description": "Download Voxa. A modern Discord client for macOS, built with SwiftUI. Fully Open Source."
    },
    "https://github.com/voxa-org/voxa": {
      "title": "GitHub",
      "description": "Voxa GitHub repository"
    }
  },
  "links": {
    "githubOrg": "https://github.com/plyght",
    "githubProject": "https://github.com/voxa-org/voxa",
    "githubRepo": "https://github.com/voxa-org/voxa",
    "githubSponsor": "https://github.com/sponsors/plyght",
    "twitter": "https://twitter.com/plyght__",
    "discord": "https://discord.gg/Dps8HnDBpw",
    "license": "https://github.com/voxa-org/voxa/blob/main/LICENSE"
  },
  "navigation": [
    "/",
    "/whats-new",
    "/blog",
    "https://github.com/voxa-org/voxa"
  ],
  "categories": {
    "updates": {
      "title": "Updates",
      "longTitle": "Project Updates",
      "description": "Get the latest news on our Discord client, including new releases and upcoming features, keeping you in the loop with our project's progress."
    },
    "insights": {
      "title": "Insights",
      "longTitle": "Development Insights",
      "description": "Explore the nuts and bolts of our development process, offering a behind-the-scenes look at the challenges and solutions that power our project."
    },
    "spotlights": {
      "title": "Contributor Spotlights",
      "longTitle": "Contributor Spotlights",
      "description": "Celebrate the individuals who make our project possible, highlighting their contributions, stories, and the impact they have on our community."
    },
    "tutorials": {
      "title": "Tutorials",
      "longTitle": "Guides and Tutorials",
      "description": "Explore a wide range of tutorials that not only guide you through mastering our Discord client but also delve into general coding tutorials to elevate your development skills."
    },
    "user-voices": {
      "title": "User Voices",
      "longTitle": "User Voices and Stories",
      "description": "Hear firsthand from our users about how our Discord client enhances their fun(ctionality), with personal anecdotes, innovative usage tips, and custom setup guides."
    },
    "news": {
      "title": "News",
      "longTitle": "Industry News and Trends",
      "description": "Stay informed with updates and insights on the latest in tech, software development, and how these trends impact our project and community."
    }
  }
}

================
File: data/macOS-versions.json
================
{
  "10.0": "Cheetah",
  "10.1": "Puma",
  "10.2": "Jaguar",
  "10.3": "Panther",
  "10.4": "Tiger",
  "10.5": "Leopard",
  "10.6": "Snow Leopard",
  "10.7": "Lion",
  "10.8": "Mountain Lion",
  "10.9": "Mavericks",
  "10.10": "Yosemite",
  "10.11": "El Capitan",
  "10.12": "Sierra",
  "10.13": "High Sierra",
  "10.14": "Mojave",
  "10.15": "Catalina",
  "11": "Big Sur",
  "12": "Monterey",
  "13": "Ventura",
  "14": "Sonoma",
  "15": "Sequoia"
}

================
File: data/syntax-dark.js
================
var syntaxTheme = {
  'code[class*="language-"]': {
    color: '#ffffff',
    fontFamily: 'SF Mono, SFMono-Regular, ui-monospace, Menlo, monospace',
    direction: 'ltr',
    textAlign: 'left',
    whiteSpace: 'pre',
    wordSpacing: 'normal',
    wordBreak: 'normal',
    lineHeight: '1.666',
    MozTabSize: '4',
    OTabSize: '4',
    tabSize: '4',
    WebkitHyphens: 'none',
    MozHyphens: 'none',
    msHyphens: 'none',
    hyphens: 'none',
  },
  'pre[class*="language-"]': {
    color: '#ffffff',
    fontFamily: 'SF Mono, SFMono-Regular, ui-monospace, Menlo, monospace',
    direction: 'ltr',
    textAlign: 'left',
    whiteSpace: 'pre',
    wordSpacing: 'normal',
    wordBreak: 'normal',
    lineHeight: '1.666',
    MozTabSize: '4',
    OTabSize: '4',
    tabSize: '4',
    WebkitHyphens: 'none',
    MozHyphens: 'none',
    msHyphens: 'none',
    hyphens: 'none',
    padding: '0.5333em 0.9333em',
    margin: '0.5em 0',
    overflow: 'auto',
    background: '#333336',
  },
  ':not(pre) > code[class*="language-"]': {
    background: '#333336',
    padding: '0.1em',
    borderRadius: '0.3em',
  },
  comment: {
    color: '#7f8c98',
  },
  prolog: {
    color: '#7f8c98',
  },
  cdata: {
    color: '#7f8c98',
  },
  delimiter: {
    color: '#b281eb',
  },
  boolean: {
    color: '#ff7ab2',
  },
  keyword: {
    color: '#ff7ab2',
  },
  selector: {
    color: '#ff7ab2',
  },
  important: {
    color: '#ff7ab2',
  },
  atrule: {
    color: '#ff7ab2',
  },
  operator: {
    color: '#ffffff',
  },
  punctuation: {
    color: '#ffffff',
  },
  'attr-name': {
    color: '#b281eb',
  },
  tag: {
    color: '#d9c97c',
  },
  'tag.punctuation': {
    color: '#ffffff',
  },
  doctype: {
    color: '#7f8c98',
  },
  builtin: {
    color: '#ffffff',
  },
  entity: {
    color: '#d9c97c',
  },
  number: {
    color: '#d9c97c',
  },
  symbol: {
    color: '#d9c97c',
  },
  property: {
    color: '#d9c97c',
  },
  constant: {
    color: '#b281eb',
  },
  variable: {
    color: '#b281eb',
  },
  string: {
    color: '#ff8170',
  },
  char: {
    color: '#d9c97c',
  },
  'attr-value': {
    color: '#ff8170',
  },
  'attr-value.punctuation': {
    color: '#ffffff',
  },
  url: {
    color: '#69f',
    textDecoration: 'underline',
  },
  function: {
    color: '#b281eb',
  },
  regex: {
    background: '#ff8170',
  },
  bold: {
    fontWeight: 'bold',
  },
  italic: {
    fontStyle: 'italic',
  },
  inserted: {
    background: '#03a10e',
  },
  deleted: {
    background: '#ff3037',
  },
};

export default syntaxTheme;

================
File: data/syntax-light.js
================
var syntaxTheme = {
  'code[class*="language-"]': {
    color: '#000000',
    fontFamily: 'SF Mono, SFMono-Regular, ui-monospace, Menlo, monospace',
    direction: 'ltr',
    textAlign: 'left',
    whiteSpace: 'pre',
    wordSpacing: 'normal',
    wordBreak: 'normal',
    lineHeight: '1.666',
    MozTabSize: '4',
    OTabSize: '4',
    tabSize: '4',
    WebkitHyphens: 'none',
    MozHyphens: 'none',
    msHyphens: 'none',
    hyphens: 'none',
  },
  'pre[class*="language-"]': {
    color: '#000000',
    fontFamily: 'SF Mono, SFMono-Regular, ui-monospace, Menlo, monospace',
    direction: 'ltr',
    textAlign: 'left',
    whiteSpace: 'pre',
    wordSpacing: 'normal',
    wordBreak: 'normal',
    lineHeight: '1.666',
    MozTabSize: '4',
    OTabSize: '4',
    tabSize: '4',
    WebkitHyphens: 'none',
    MozHyphens: 'none',
    msHyphens: 'none',
    hyphens: 'none',
    padding: '0.5333em 0.9333em',
    margin: '0.5em 0',
    overflow: 'auto',
    background: '#f5f5f7',
  },
  ':not(pre) > code[class*="language-"]': {
    background: '#f5f5f7',
    padding: '0.1em',
    borderRadius: '0.3em',
  },
  comment: {
    color: '#707f8c',
  },
  prolog: {
    color: '#707f8c',
  },
  cdata: {
    color: '#707f8c',
  },
  delimiter: {
    color: '#703daa',
  },
  boolean: {
    color: '#ad3da4',
  },
  keyword: {
    color: '#ad3da4',
  },
  selector: {
    color: '#ad3da4',
  },
  important: {
    color: '#ad3da4',
  },
  atrule: {
    color: '#ad3da4',
  },
  operator: {
    color: '#000000',
  },
  punctuation: {
    color: '#000000',
  },
  'attr-name': {
    color: '#703daa',
  },
  tag: {
    color: '#272ad8',
  },
  'tag.punctuation': {
    color: '#000000',
  },
  doctype: {
    color: '#506375',
  },
  builtin: {
    color: '#000000',
  },
  entity: {
    color: '#272ad8',
  },
  number: {
    color: '#272ad8',
  },
  symbol: {
    color: '#272ad8',
  },
  property: {
    color: '#272ad8',
  },
  constant: {
    color: '#703daa',
  },
  variable: {
    color: '#703daa',
  },
  string: {
    color: '#b8bb26',
  },
  char: {
    color: '#272ad8',
  },
  'attr-value': {
    color: '#b8bb26',
  },
  'attr-value.punctuation': {
    color: '#000000',
  },
  url: {
    color: '#1337ff',
    textDecoration: 'underline',
  },
  function: {
    color: '#703daa',
  },
  regex: {
    background: '#b8bb26',
  },
  bold: {
    fontWeight: 'bold',
  },
  italic: {
    fontStyle: 'italic',
  },
  inserted: {
    background: '#008009',
  },
  deleted: {
    background: '#e30000',
  },
};

export default syntaxTheme;

================
File: hooks/useColorScheme.js
================
import { useEffect, useState } from 'react';

const getColorSchemeSetting = () =>
  window.localStorage.getItem('colorScheme') ?? 'auto';

const getSystemColorScheme = () =>
  typeof window.matchMedia !== 'undefined' &&
  window.matchMedia('(prefers-color-scheme: dark)').matches
    ? 'dark'
    : 'light';

const useColorScheme = () => {
  const [colorSchemeSetting, setColorSchemeSetting] = useState();
  const [colorScheme, setColorSchemeState] = useState();

  const setColorScheme = (colorScheme) => {
    if (['light', 'dark'].includes(colorScheme)) {
      window.localStorage.setItem('colorScheme', colorScheme);
      setColorSchemeState(colorScheme);
    } else {
      window.localStorage.removeItem('colorScheme');
      setColorSchemeState(getSystemColorScheme());
    }
  };

  useEffect(() => {
    document.children[0].setAttribute('data-color-scheme', colorScheme);
  }, [colorScheme]);

  useEffect(() => {
    const initialColorScheme = getColorSchemeSetting();
    const handleChange = () => setColorScheme(getColorSchemeSetting());

    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', handleChange);

    setColorScheme(initialColorScheme);
    setColorSchemeSetting(initialColorScheme);

    return () => {
      window
        .matchMedia('(prefers-color-scheme: dark)')
        .removeEventListener('change', handleChange);
    };
  }, []);

  return {
    colorSchemeSetting,
    colorScheme,
    getColorSchemeSetting,
    setColorScheme,
    getSystemColorScheme,
  };
};

export default useColorScheme;

================
File: hooks/useMediaQuery.js
================
import { useEffect, useState } from 'react';

const useMediaQuery = (query) => {
  const mediaMatch = window.matchMedia(query);
  const [matches, setMatches] = useState(mediaMatch.matches);

  useEffect(() => {
    const handler = (e) => setMatches(e.matches);
    mediaMatch.addListener(handler);
    return () => mediaMatch.removeListener(handler);
  });
  return matches;
};

export default useMediaQuery;

================
File: hooks/useVisibilityProps.js
================
import { useSite } from '@/components/common/Site';

const useVisibilityProps = (props) => {
  const {
    windowDimensions: { breakpoint },
  } = useSite();
  const { show, hide } = props;

  if (Object.hasOwnProperty.call(props, 'hide')) {
    if (hide === true) {
      return false;
    }
    if (typeof hide === 'string') {
      if (hide === breakpoint) {
        return false;
      }
    }
    if (Array.isArray(hide)) {
      if (hide.includes(breakpoint)) {
        return false;
      }
    } else if (typeof hide === 'object') {
      if (hide[breakpoint]) {
        return false;
      }
    }
  }

  if (Object.hasOwnProperty.call(props, 'show')) {
    if (!show) {
      return false;
    }
    if (typeof show === 'string') {
      if (show !== breakpoint) {
        return false;
      }
    }
    if (Array.isArray(show)) {
      if (!show.includes(breakpoint)) {
        return false;
      }
    } else if (typeof show === 'object') {
      if (!show[breakpoint]) {
        return false;
      }
    }
  }

  return true;
};

export default useVisibilityProps;

================
File: hooks/useWindowDimensions.js
================
import { getBreakpoint } from '@/styles/breakpoints';
import { useState, useEffect } from 'react';

const useWindowDimensions = () => {
  const [windowDimensions, setWindowDimensions] = useState({});

  useEffect(() => {
    const handleResize = () => {
      setWindowDimensions({
        width: window.innerWidth,
        height: window.innerHeight,
        breakpoint: getBreakpoint(window.innerWidth),
      });
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return windowDimensions;
};

export default useWindowDimensions;

================
File: pages/blog/[...slug].js
================
import matter from 'gray-matter';
import glob from 'glob';
import { fetchGitHubUser } from '@/utils/fetchData';

export { default } from '@/components/pages/blog/post';

export async function getStaticProps({ params }) {
  const { slug } = params;

  // retrieving the Markdown file associated to the slug
  // and reading its data
  const content = await import(`../../data/blog/${slug.join('/')}.md`);
  const data = await matter(content.default);
  // fetching authors user data from GitHub
  const author = data.data.author
    ? await fetchGitHubUser(data.data.author)
    : null;

  return {
    props: {
      frontmatter: {
        ...data.data,
        date: new Date(data.data.date).toISOString(),
      },
      markdownBody: data.content,
      author,
    },
  };
}

export async function getStaticPaths() {
  // getting all .md files from the blog directory, including subdirectories
  const posts = glob.sync('data/blog/**/*.md');
  // converting the file paths to nested slugs (e.g., ['2023', '04', 'my-test-post'])
  const postSlugs = posts.map((file) => {
    // Split the file path and remove the first 'data/blog' part and '.md' extension
    const pathParts = file.split('/').slice(2);
    // Remove the '.md' extension from the last part (post title)
    pathParts[pathParts.length - 1] = pathParts[pathParts.length - 1].replace(
      /\.md$/,
      ''
    );
    // Replace spaces with hyphens in each part
    return pathParts.map((part) => part.replace(/ /g, '-'));
  });
  // creating a path for each of the nested `slug` parameter
  const paths = postSlugs.map((slugArray) => ({ params: { slug: slugArray } }));

  return {
    paths,
    fallback: false,
  };
}

================
File: pages/blog/index.js
================
import getAllPosts from '@/utils/getAllPosts';

export { default } from '@/components/pages/blog';

export async function getStaticProps() {
  const config = await import(`../../data/config.json`);

  const posts = await getAllPosts();

  return {
    props: {
      siteTitle: config.title,
      posts,
    },
  };
}

================
File: pages/dev/grid.js
================
export { default } from '@/components/pages/dev/grid';

================
File: pages/dev/layout.js
================
export { default } from '@/components/pages/dev/layout';

================
File: pages/dev/typography.js
================
export { default } from '@/components/pages/dev/typography';

================
File: pages/legal/license.js
================
export { default } from '@/components/pages/legal/license';

================
File: pages/legal/privacy.js
================
export { default } from '@/components/pages/legal/privacy';

================
File: pages/legal/tos.js
================
export { default } from '@/components/pages/legal/tos';

================
File: pages/sparkle/[tag].js
================
export { default } from '@/components/pages/whats-new/RawRelease'
import { fetchWithCache } from '@/utils/fetchData';

export async function getStaticProps({ params }) {
  const { tag } = params;
  const data = await fetchWithCache(
    'releases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );

  return {
    props: {
      release: data.find((release) => release.tag_name === tag) || null,
    },
  };
}

export async function getStaticPaths() {
  const data = await fetchWithCache(
    'releases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );
  const paths = data.map((release) => ({ params: { tag: release.tag_name } }));

  return {
    paths,
    fallback: false,
  };
}

================
File: pages/whats-new/raw/[tag].js
================
export { default } from '@/components/pages/whats-new/RawRelease'
import { fetchWithCache } from '@/utils/fetchData';

export async function getStaticProps({ params }) {
  const { tag } = params;
  const data = await fetchWithCache(
    'releases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );

  return {
    props: {
      release: data.find((release) => release.tag_name === tag) || null,
    },
  };
}

export async function getStaticPaths() {
  const data = await fetchWithCache(
    'releases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );
  const paths = data.map((release) => ({ params: { tag: release.tag_name } }));

  return {
    paths,
    fallback: false,
  };
}

================
File: pages/whats-new/index.js
================
export { default } from '@/components/pages/whats-new';
import { fetchWithCache } from '@/utils/fetchData';

export async function getStaticProps() {
  const data = await fetchWithCache(
    'releases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );

  return {
    props: {
      releases: data,
    },
  };
}

================
File: pages/_app.js
================
import Head from 'next/head';
import Footer from '@/components/common/Footer';
import Header from '@/components//common/Header';
import Site from '@/components/common/Site';
import '@/styles/globals.css';
import config from '@/data/config';

function App({ Component, pageProps, router }) {
  const { pathname, asPath } = router ?? {};
  const defaultPageData = config.pages['/'];
  const pageData = config.pages[pathname] ?? config.pages['/'];
  const isDefault = defaultPageData === pageData;
  const title = isDefault
    ? `Voxa | A macOS native Discord client`
    : `${pageData.title} | Voxa`;
  const { description } = pageData;
  const { host } = config;

  return (
    <Site>
      <Head>
        <title>{title}</title>
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no, user-scalable=no, viewport-fit=cover"
        />
        <meta name="description" content={description} />
        <meta property="og:url" content={`${host}${asPath}`} />
        {pathname !== '/blog/[...slug]' && (
          <>
            <meta property="og:title" content={title} />
            <meta property="og:description" content={description} />
            <meta property="og:image" content={`${host}/social-preview.jpg`} />
          </>
        )}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@plyght__" />
        <meta name="twitter:creator" content="@plyght__" />
      </Head>
      <Layout pathname={pathname}>
        <Component {...pageProps} />
      </Layout>
    </Site>
  );
}

const Layout = ({ children, pathname }) => {
  if (pathname === '/sparkle/[tag]') {
    return <main>{children}</main>;
  }

  return (
    <>
      <Header />
      <main>{children}</main>
      <Footer />
    </>
  );
}

export default App;

================
File: pages/_document.js
================
import Document, { Html, Head, Main, NextScript } from 'next/document';
import { ServerStyleSheet } from 'styled-components';

export default class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: [
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>,
        ],
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html>
        <Head>
          <meta charSet="utf-8" />
          <meta name="apple-mobile-web-app-capable" content="yes"></meta>
          <link rel="icon" href="/favicon.png" type="image/svg+xml" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

================
File: pages/developer.js
================
export { default } from '@/components/pages/developer';

================
File: pages/download.js
================
import { fetchWithCache } from '@/utils/fetchData';
export { default } from '@/components/pages/download';

export async function getStaticProps() {
  // 1. Fetch all releases
  const releases = await fetchWithCache(
    'allReleases',
    'https://api.github.com/repos/voxa-org/voxa/releases'
  );
  // This endpoint returns an array of release objects, including prereleases.
  // Source: https://docs.github.com/en/rest/releases/releases#list-releases

  // 2. Find the first release in the array that is marked as prerelease
  // or use some filtering logic if you want a specific prerelease tag
  const preRelease = releases.find((release) => release.prerelease);

  console.log(preRelease);

  // 3. If there's no prerelease found, fall back to whatever logic you like
  const selectedRelease = preRelease || releases[0];

  // 4. Match the dmg asset that looks like Voxa.0.x.dmg
  const appAsset = selectedRelease.assets?.find((asset) =>
    String(asset.name).endsWith('.dmg')
  );

  // 5. Return props
  return {
    props: {
      versionNumber: selectedRelease.tag_name || null,
      downloadUrl: appAsset?.browser_download_url || null,
    },
    revalidate: 60 * 60 * 24, // once every 24 hours
  };
}

================
File: pages/extensions.js
================
export { default } from '@/components/pages/extensions';

================
File: pages/index.js
================
// pages/index.js
import { fetchWithCache } from '@/utils/fetchData';
import getMinimumSystemVersion from '@/utils/getMinimumSystemVersion';
export { default } from '@/components/pages/home';

export async function getStaticProps() {
  // Fetch from GitHub
  let data = await fetchWithCache(
    'latestRelease',
    'https://api.github.com/repos/voxa-org/voxa/releases/latest'
  );

  // If `data` is somehow null or undefined, set it to an empty object
  // so we don't access `tag_name` of `undefined`.
  if (!data) {
    data = {};
  }

  // Provide a fallback:
  // If data.tag_name is undefined, store `null` instead.
  const versionNumber = data.tag_name || null;

  // Same idea for `body`; pass a fallback string if `data.body` is undefined
  const minimumSystemVersion = getMinimumSystemVersion(data.body || '');

  return {
    props: {
      versionNumber,             // Now guaranteed to be either a string or null
      minimumSystemVersion,      // Also guaranteed to NOT blow up
    },
    revalidate: 60 * 60 * 24,    // Revalidate once a day
  };
}

================
File: pages/resources.js
================
export { default } from '@/components/pages/resources';

================
File: public/favicon.svg
================
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
	<style>
		path {
			fill: #000000;
		}
		@media ( prefers-color-scheme: dark ) {
			path {
				fill: #FFFFFF;
			}
		}
	</style>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 15.9887C0 16.8733 0.509088 17.4858 1.39446 17.6786C2.83319 17.9622 3.38654 18.6767 3.38654 20.4234V23.1002C3.38654 26.4915 4.93594 28 8.24501 28C8.51063 28 8.76517 27.966 8.96438 27.9093C9.60627 27.7278 9.91615 27.2854 9.91615 26.741C9.91615 26.1399 9.65054 25.7996 9.10825 25.6522C8.97545 25.6181 8.84264 25.5955 8.6877 25.5728C6.98336 25.4367 6.37467 24.6767 6.37467 22.7372V19.4367C6.37467 17.4631 5.22369 16.2949 3.33121 16.0794C3.22054 16.0681 3.22054 15.9319 3.33121 15.9206C5.22369 15.7164 6.37467 14.5482 6.37467 12.5747V9.2741C6.37467 7.33459 6.98336 6.58601 8.6877 6.43856C8.87584 6.41588 9.04185 6.39319 9.17465 6.34783C9.66161 6.18904 9.91615 5.83743 9.91615 5.27032C9.91615 4.7259 9.61734 4.30624 8.99758 4.11342C8.76517 4.03403 8.48849 4 8.16754 4C4.92487 4 3.38654 5.53119 3.38654 8.92249V11.5879C3.38654 13.3233 2.82212 14.0378 1.39446 14.3214C0.509088 14.5142 0 15.1153 0 15.9887ZM32 15.9887C32 15.1153 31.4909 14.5142 30.6055 14.3214C29.1889 14.0265 28.6135 13.3233 28.6135 11.5879V8.92249C28.6135 5.53119 27.0751 4 23.8435 4C23.5115 4 23.2348 4.03403 23.0024 4.11342C22.3605 4.30624 22.0949 4.7259 22.0949 5.27032C22.0949 5.83743 22.3495 6.17769 22.8253 6.34783C22.9582 6.39319 23.1242 6.41588 23.3123 6.43856C25.0056 6.55198 25.6364 7.33459 25.6364 9.2741V12.5747C25.6364 14.5482 26.7874 15.8526 28.6799 15.9206C28.7905 15.9319 28.7795 16.0681 28.6799 16.0794C26.7874 16.1701 25.6364 17.4518 25.6364 19.4367V22.7372C25.6364 24.6767 25.0166 25.4253 23.3123 25.5728C23.1574 25.5955 23.0246 25.6181 22.9028 25.6522C22.3605 25.7996 22.0949 26.1399 22.0949 26.741C22.0949 27.3081 22.4048 27.7505 23.0356 27.9093C23.2348 27.966 23.4894 28 23.755 28C27.0641 28 28.6135 26.4915 28.6135 23.1002V20.4234C28.6135 18.6767 29.1668 17.9622 30.6055 17.6786C31.4909 17.4858 32 16.8733 32 15.9887ZM14.7463 9.96786C14.7463 9.43333 15.1692 9 15.6907 9H22.6163C23.1379 9 23.5607 9.43333 23.5607 9.96786V10.0744C23.5607 10.609 23.1379 11.0423 22.6163 11.0423H15.6907C15.1692 11.0423 14.7463 10.609 14.7463 10.0744V9.96786ZM9.39477 9C8.87319 9 8.45037 9.43333 8.45037 9.96786V10.0744C8.45037 10.609 8.87319 11.0423 9.39477 11.0423H12.5428C13.0643 11.0423 13.4871 10.609 13.4871 10.0744V9.96786C13.4871 9.43333 13.0643 9 12.5428 9H9.39477ZM8.45037 13.9679C8.45037 13.4333 8.87319 13 9.39477 13H18.8387C19.3603 13 19.7831 13.4333 19.7831 13.9679V14.0321C19.7831 14.5667 19.3603 15 18.8387 15H9.39477C8.87319 15 8.45037 14.5667 8.45037 14.0321V13.9679ZM21.9867 13C21.4651 13 21.0423 13.4333 21.0423 13.9679V14.0321C21.0423 14.5667 21.4651 15 21.9867 15H22.6163C23.1379 15 23.5607 14.5667 23.5607 14.0321V13.9679C23.5607 13.4333 23.1379 13 22.6163 13H21.9867ZM16.0055 17.9679C16.0055 17.4333 16.4284 17 16.9499 17H22.6163C23.1379 17 23.5607 17.4333 23.5607 17.9679V18.0321C23.5607 18.5667 23.1379 19 22.6163 19H16.9499C16.4284 19 16.0055 18.5667 16.0055 18.0321V17.9679ZM9.39477 17C8.87319 17 8.45037 17.4333 8.45037 17.9679V18.0321C8.45037 18.5667 8.87319 19 9.39477 19H13.8019C14.3235 19 14.7463 18.5667 14.7463 18.0321V17.9679C14.7463 17.4333 14.3235 17 13.8019 17H9.39477ZM8.45037 21.9679C8.45037 21.4333 8.87319 21 9.39477 21H16.3203C16.8419 21 17.2647 21.4333 17.2647 21.9679V22.0321C17.2647 22.5667 16.8419 23 16.3203 23H9.39477C8.87319 23 8.45037 22.5667 8.45037 22.0321V21.9679ZM19.4683 21C18.9467 21 18.5239 21.4333 18.5239 21.9679V22.0321C18.5239 22.5667 18.9467 23 19.4683 23H22.6163C23.1379 23 23.5607 22.5667 23.5607 22.0321V21.9679C23.5607 21.4333 23.1379 21 22.6163 21H19.4683Z"/>
</svg>

================
File: public/sitemap.xml
================
<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
        
              <url>
                  <loc>https://codeedit.app/developer</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app/download</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app/extensions</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app/resources</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app/blog/demo</loc>
              </url>
            
              <url>
                  <loc>https://codeedit.app/blog/starter-post</loc>
              </url>
            
    </urlset>

================
File: public/vercel.svg
================
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>

================
File: scripts/generate-sitemap.mjs
================
import { writeFileSync } from 'fs';

import { globby } from 'globby';
import prettier from 'prettier';

async function generate() {
  const prettierConfig = await prettier.resolveConfig('./.prettierrc.js');
  const pages = await globby([
    'pages/*.tsx',
    'pages/*.jsx',
    'pages/*.js',
    'data/**/*.mdx',
    'data/**/*.md',
    '!data/*.mdx',
    '!pages/_*.tsx',
    '!pages/_*.js',
    '!pages/_*.jsx',
    '!pages/api',
    '!pages/404.tsx',
    '!pages/sparkle/**/*.js'
  ]);

  const sitemap = `
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
        ${pages
          .map((page) => {
            const path = page
              .replace('pages', '')
              .replace('data', '')
              .replace('.tsx', '')
              .replace('.ts', '')
              .replace('.jsx', '')
              .replace('.js', '')
              .replace('.md', '')
              .replace('.mdx', '');
            const route = path === '/index' ? '' : path;
            return `
              <url>
                  <loc>${`https://codeedit.app${route}`}</loc>
              </url>
            `;
          })
          .join('')}
    </urlset>
    `;

  // const formatted = prettier.format(sitemap, {
  //   ...prettierConfig,
  //   parser: 'html',
  // });

  // eslint-disable-next-line no-sync
  writeFileSync('public/sitemap.xml', sitemap);
}

generate();

================
File: styles/breakpoints.js
================
export const breakpoints = {
  xs: 500,
  sm: 767,
  md: 1068,
  lg: 1440,
  xl: 9999,
};

export const getBreakpoint = (width) => {
  const { xs, sm, md, lg } = breakpoints;

  if (width <= xs) {
    return 'xs';
  }
  if (width > xs && width <= sm) {
    return 'sm';
  }
  if (width > sm && width <= md) {
    return 'md';
  }
  if (width > md && width <= lg) {
    return 'lg';
  }
  if (width > lg) {
    return 'xl';
  }
};

export const mediaQueries = {
  // small phones
  xs: `only screen and (max-width: ${breakpoints.xs}px)`,
  // most phones
  sm: `only screen and (max-width: ${breakpoints.sm}px)`,
  // tablets
  md: `only screen and (max-width: ${breakpoints.md}px)`,
  // large tablets and small desktops
  lg: `only screen and (max-width: ${breakpoints.lg}px)`,
  // large desktops
  xl: `only screen and (min-width: ${breakpoints.lg + 1}px)`,
};

////////////////////////////////////
// ... xs | sm | md | lg | xl ... //
// ============================== //
// min  xs : 0 - Infinity         //
// ...------------------------... //
// only xs : 0 - 499              //
// ...----|                       //
// max  xs : 0 - 499              //
// ...----|                       //
// min  sm : 500 - Infinity       //
//        |-------------------... //
// only sm : 500 - 733            //
//        |----|                  //
// max  sm : 0 - 734              //
// ...---------|                  //
// min  md : 734 - Infinity       //
//             |--------------... //
// only md : 734 - 1068           //
//             |----|             //
// max  md : 0 - 1068             //
// ...--------------|             //
// min  lg : 0 - 1440             //
// ...-------------------|        //
// only lg : 0 - 1440             //
//                  |----|        //
// max  lg : 0 - 1440             //
// ...-------------------|        //
// min  xl : 1441 - Infinity      //
//                       |----... //
// only xl : 1441 - Infinity      //
//                       |----... //
// max  xl : 0 - Infinity         //
// ...------------------------... //
////////////////////////////////////

================
File: styles/getResponsivePropStyles.js
================
import { mediaQueries } from './breakpoints';

const getMediaQueryStyle = (size, val, getStyle) =>
  Object.keys(val).includes(size)
    ? size === 'lg'
      ? getStyle(val[size])
      : `
    @media ${mediaQueries[size]} {
      ${getStyle(val[size])}
    }
  `
    : ``;

const getResponsivePropStyles = (val, getStyle) =>
  val
    ? typeof val === 'object'
      ? `
        ${getMediaQueryStyle('xl', val, getStyle)}
        ${getMediaQueryStyle('lg', val, getStyle)}
        ${getMediaQueryStyle('md', val, getStyle)}
        ${getMediaQueryStyle('sm', val, getStyle)}
        ${getMediaQueryStyle('xs', val, getStyle)}
      `
      : getStyle(val)
    : ``;

export default getResponsivePropStyles;

================
File: styles/getTypographyStyles.js
================
import { mediaQueries } from './breakpoints';

const getTypographyStyles = (variant) => {
  switch (variant) {
    case 'headline-standalone':
      return `
          font-size: 96px;
          line-height: 1.04167;
          font-weight: 600;
          letter-spacing: -.015em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:80px;
            line-height: 1.05;
            font-weight: 600;
            letter-spacing: -.015em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:48px;
            line-height: 1.08349;
            font-weight: 600;
            letter-spacing: -.003em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'headline-super':
      return `
          font-size: 80px;
          line-height: 1.05;
          font-weight: 600;
          letter-spacing: -.015em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:64px;
            line-height: 1.0625;
            font-weight: 600;
            letter-spacing: -.009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:48px;
            line-height: 1.08349;
            font-weight: 600;
            letter-spacing: -.003em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'headline-elevated':
      return `
          font-size: 64px;
          line-height: 1.0625;
          font-weight: 600;
          letter-spacing: -.009em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:48px;
            line-height: 1.08349;
            font-weight: 600;
            letter-spacing: -.003em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:40px;
            line-height: 1.1;
            font-weight: 600;
            letter-spacing: 0em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'headline':
      return `
          font-size: 48px;
          line-height: 1.08349;
          font-weight: 600;
          letter-spacing: -.003em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:40px;
            line-height: 1.1;
            font-weight: 600;
            letter-spacing: 0em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:32px;
            line-height: 1.125;
            font-weight: 600;
            letter-spacing: .004em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'headline-reduced':
      return `
          font-size: 40px;
          line-height: 1.1;
          font-weight: 600;
          letter-spacing: 0em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:32px;
            line-height: 1.125;
            font-weight: 600;
            letter-spacing: .004em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:28px;
            line-height: 1.14286;
            font-weight: 600;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'eyebrow-super':
      return `
          font-size: 32px;
          line-height: 1.125;
          font-weight: 600;
          letter-spacing: .004em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:28px;
            line-height: 1.14286;
            font-weight: 600;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:24px;
            line-height: 1.16667;
            font-weight: 600;
            letter-spacing: .009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'eyebrow-elevated':
      return `
          font-size: 28px;
          line-height: 1.14286;
          font-weight: 600;
          letter-spacing: .007em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:24px;
            line-height: 1.16667;
            font-weight: 600;
            letter-spacing: .009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:21px;
            line-height: 1.19048;
            font-weight: 600;
            letter-spacing: .011em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'eyebrow':
      return `
          font-size: 24px;
          line-height: 1.16667;
          font-weight: 600;
          letter-spacing: .009em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:21px;
            line-height: 1.19048;
            font-weight: 600;
            letter-spacing: .011em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'eyebrow-reduced':
      return `
          font-size: 21px;
          line-height: 1.19048;
          font-weight: 600;
          letter-spacing: .011em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.sm} {
            font-size:19px;
            line-height: 1.21053;
            font-weight: 600;
            letter-spacing: .012em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'intro-elevated':
      return `
          font-size: 24px;
          line-height: 1.33341;
          font-weight: 400;
          letter-spacing: .009em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:21px;
            line-height: 1.381;
            font-weight: 400;
            letter-spacing: .011em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'intro':
      return `
          font-size: 21px;
          line-height: 1.381;
          font-weight: 400;
          letter-spacing: .011em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.sm} {
            font-size: 19px;
            line-height: 1.4211;
            font-weight: 400;
            letter-spacing: .012em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'section-head':
      return `
          font-size: 32px;
          line-height: 1.125;
          font-weight: 700;
          letter-spacing: .004em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          margin-bottom: 24px;
          @media ${mediaQueries.md} {
            font-size: 28px;
            line-height: 1.14286;
            font-weight: 700;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
      `;
    case 'quote':
      return `
          font-size: 40px;
          line-height: 1.2;
          font-weight: 400;
          letter-spacing: 0em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:32px;
            line-height: 1.25;
            font-weight: 400;
            letter-spacing: .004em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:28px;
            line-height: 1.28583;
            font-weight: 400;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'quote-reduced':
      return `
          font-size: 32px;
          line-height: 1.25;
          font-weight: 400;
          letter-spacing: .004em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:28px;
            line-height: 1.28583;
            font-weight: 400;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:24px;
            line-height: 1.33341;
            font-weight: 400;
            letter-spacing: .009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'callout':
      return `
          font-size: 32px;
          line-height: 1.125;
          font-weight: 600;
          letter-spacing: .004em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:28px;
            line-height: 1.14286;
            font-weight: 600;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:24px;
            line-height: 1.16667;
            font-weight: 600;
            letter-spacing: .009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'manifesto':
      return `
          font-size: 32px;
          line-height: 1.25;
          font-weight: 600;
          letter-spacing: .004em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:28px;
            line-height: 1.28583;
            font-weight: 600;
            letter-spacing: .007em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
          @media ${mediaQueries.sm} {
            font-size:24px;
            line-height: 1.33341;
            font-weight: 600;
            letter-spacing: .009em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'label':
      return `
          font-size: 24px;
          line-height: 1.16667;
          font-weight: 600;
          letter-spacing: .009em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          @media ${mediaQueries.md} {
            font-size:21px;
            line-height: 1.19048;
            font-weight: 600;
            letter-spacing: .011em;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
          }
        `;
    case 'tout':
      return `
          font-size: 19px;
          line-height: 1.21053;
          font-weight: 600;
          letter-spacing: .012em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'body':
      return `
          font-size: 17px;
          line-height: 1.47059;
          font-weight: 400;
          letter-spacing: -.022em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'body-tight':
      return `
          font-size: 17px;
          line-height: 1.23536;
          font-weight: 400;
          letter-spacing: -.022em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'body-reduced':
      return `
          font-size: 14px;
          line-height: 1.42859;
          font-weight: 400;
          letter-spacing: -.016em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'body-reduced-tight':
      return `
          font-size: 14px;
          line-height: 1.28577;
          font-weight: 400;
          letter-spacing: -.016em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'caption':
      return `
          font-size: 12px;
          line-height: 1.33337;
          font-weight: 400;
          letter-spacing: -.01em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'sosumi':
      return `
          font-size: 12px;
          line-height: 1.33337;
          font-weight: 400;
          letter-spacing: -.01em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'headline-body':
      return `
          font-size: 17px;
          line-height: 1.47059;
          font-weight: 600;
          letter-spacing: -.022em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    case 'headline-body-reduced':
      return `
          font-size: 14px;
          line-height: 1.42859;
          font-weight: 600;
          letter-spacing: -.016em;
          font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        `;
    default:
      return ``;
  }
};

export default getTypographyStyles;

================
File: styles/globals.css
================
*,
*:before,
*:after {
  box-sizing: inherit;
}

ul,
ol,
li,
dl,
dt,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hgroup,
p,
blockquote,
figure,
form,
fieldset,
input,
legend,
pre,
abbr,
button {
  margin: 0;
  padding: 0;
}

/* h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  color: #1d1d1f;
} */

html,
body {
  width: 100%;
  padding: 0;
  margin: 0;
  font-family:
    -apple-system,
    BlinkMacSystemFont,
    Segoe UI,
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    Fira Sans,
    Droid Sans,
    Helvetica Neue,
    sans-serif;
  text-size-adjust: none;
}

html {
  height: 100%;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html:not([data-color-scheme]) {
    background-color: black;
    color: white;
  }
}

@media (prefers-color-scheme: light) {
  html:not([data-color-scheme]) {
    background-color: white;
    color: black;
  }
}

html:not([data-color-scheme]) body {
  display: none;
}

html[data-color-scheme='light'] {
  background-color: white;
  color: black;
}
html[data-color-scheme='dark'] {
  background-color: black;
  color: white;
}

:root {
  --black: #000000;
  --white: #ffffff;
  --orange: #e66702;
  --tomato: #f63e54;
  --magenta: #d71bce;
  --plum: #8d1287;
  --grape: #6529f8;
  --indigo: #622aff;
  --violet: #8876fe;
  --sapphire: #3d44c3;
  --midnight: #1b23b3;
  --azure: #027fff;
  --moonstone: #2294b1;
  --teal: #049cb7;
  --sea-green: #099b9d;
  --aqua: #039e8f;
  --green: #0c9d46;
  --forest: #0c8346;

  --color-fill-blue: #0071e3;
  --color-figure-blue: #06c;
  --color-button-background-active: var(--color-fill-blue);
  --color-button-background-hover: #0077ed;
}

/* --system-primary: #fffffff9;
  --system-secondary: #ffffffc1;
  --system-tertiary: #ffffff7b; */

[data-color-scheme='light'] {
  --dark: #000000;
  --light: #ffffff;
  --glyph-gray: #1d1d1f;
  --glyph-gray-override: ;
  --glyph-gray-secondary: #6e6e73;
  --glyph-gray-secondary-alt: #515154;
  --glyph-gray-tertiary: #86868b;
  --glyph-blue: #06c;
  --glyph-blue-override: ;
  --glyph-orange: ;
  --glyph-red: ;
  --glyph-green: ;
  --fill: #fff;
  --fill-override: #000;
  --fill-gray: ;
  --fill-blue: ;
  --fill-orange: ;
  --fill-red: ;
  --fill-green: ;
  --fill-yellow: ;
  --fill-secondary: #fbfbfd; /**/
  --fill-secondary-alt: #fafafa;
  --fill-secondary-alt-override: ;
  --fill-blue-secondary: ;
  --fill-gray-secondary: ;
  --fill-gray-secondary-alt: ;
  --color-fill-green-secondary: ;
  --color-fill-light-blue-secondary: ;
  --color-fill-light-gray-secondary: ;
  --color-fill-orange-secondary: ;
  --color-fill-purple-secondary: ;
  --color-fill-red-secondary: ;
  --color-fill-teal-secondary: ;
  --color-fill-yellow-secondary: ;
  --fill-tertiary: #f5f5f7;
  --fill-tertiary-alt: #f5f5f7;
  --fill-tertiary-override: ;
  --fill-blue-tertiary: ;
  --fill-gray-tertiary: ;
  --fill-gray-quaternary: #e5e6e7;
  --fill-gray-quinary: ;
  --fill-blue-gradient-light: ;
  --fill-blue-gradient-dark: ;
  --fill-gradient-gray-start: ;
  --fill-gradient-gray-end: ;
  --fill-table: ;
  --app-store-glyph-tile: ;
  --app-store-fill-tile: ;
  --toggle-color-background: ;
  --toggle-color-text: #ffffff;
  --color-button-background: ;
  --color-button-text: #ffffff;
  --color-fill: #fff;
  --color-fill-secondary: #fbfbfd;
  --color-fill-tertiary: #f5f5f7;
  --color-fill-quaternary: #252525;
  --color-fill-blue: #0071e3;
  --color-fill-blue-secondary: #f6fbff;
  --color-fill-gray: #1d1d1f;
  --color-fill-gray-secondary: #86868b;
  --color-fill-gray-tertiary: #d2d2d7;
  --color-fill-gray-quaternary: #e8e8ed;
  --color-fill-green-secondary: #f5fff6;
  --color-fill-light-blue-secondary: #eaf3ff;
  --color-fill-light-gray-secondary: #f5f5f7;
  --color-fill-orange-secondary: #fff9f4;
  --color-fill-purple-secondary: #fcf8ff;
  --color-fill-red-secondary: #fff2f4;
  --color-fill-teal-secondary: #faffff;
  --color-fill-yellow-secondary: #fffbf2;
  --color-figure-blue: #06c;
  --color-figure-gray: #1d1d1f;
  --color-figure-gray-secondary: #6e6e73;
  --color-figure-gray-secondary-alt: #515154;
  --color-figure-gray-tertiary: #86868b;
  --color-figure-green: #008009;
  --color-figure-light-blue: #4ca9ff;
  --color-figure-light-gray: #696969;
  --color-figure-orange: #bf4800;
  --color-figure-pink: #b0b;
  --color-figure-purple: #8c28c2;
  --color-figure-red: #e30000;
  --color-figure-teal: #007c78;
  --color-figure-yellow: #9e6700;
  --color-highlight-green: #e4fee6;
  --color-highlight-red: #f8dddd;
  --color-tutorials-teal: #38a39c;
  --color-alert-deprecated: var(--color-figure-orange);
  --color-alert-deprecated-background: var(--color-fill-orange-secondary);
  --color-alert-deprecated-border: var(--color-figure-orange);
  --color-alert-important: var(--color-figure-purple);
  --color-alert-important-background: var(--color-fill-purple-secondary);
  --color-alert-important-border: var(--color-figure-purple);
  --color-alert-warning: var(--color-figure-yellow);
  --color-alert-warning-background: var(--color-fill-yellow-secondary);
  --color-alert-warning-border: var(--color-figure-yellow);
  --color-alert-note: var(--color-figure-light-gray);
  --color-alert-note-background: var(--color-fill-light-gray-secondary);
  --color-alert-note-border: var(--color-figure-light-gray);
  --color-alert-tip: var(--color-figure-teal);
  --color-alert-tip-background: var(--color-fill-teal-secondary);
  --color-alert-tip-border: var(--color-figure-teal);
  --color-alert-caution: var(--color-figure-red);
  --color-alert-caution-background: var(--color-fill-red-secondary);
  --color-alert-caution-border: var(--color-figure-red);

  /* Syntax Colors */
  --color-syntax-plain-text: #000000;
  --color-syntax-background: #f5f5f7;

  --foreground-color: var(--fill-override);
  --background-color: var(--fill);
  --background-secondary-color: var(--fill-secondary-alt);
  --background-tertiary-color: var(--fill-tertiary);
  --label-primary-color: #1d1d1f;
  --label-secondary-color: #666666;
  --label-tertiary-color: #86868b;
  --separator-color: #d2d2d7;
  --separator-secondary-color: var(--fill-gray-quaternary);
  --link-color: var(--glyph-blue);
  --material-background-color: rgba(255, 255, 255, 0.72);
  --thick-material-background-color: rgba(255, 255, 255, 0.9);
  --material-separator-color: rgba(0, 0, 0, 0.16);
  --material-filters: saturate(180%) blur(20px);
}

[data-color-scheme='dark'] {
  --dark: #000000;
  --light: #ffffff;
  --glyph-gray: #f5f5f7;
  --glyph-gray-override: #1d1d1f;
  --glyph-gray-secondary: #86868b;
  --glyph-gray-secondary-alt: #a1a1a6;
  --glyph-gray-tertiary: #6e6e73;
  --glyph-blue: #2997ff;
  --glyph-blue-override: #0066cc;
  --glyph-orange: #f56300;
  --glyph-red: #ff3037;
  --glyph-green: #03a10e;
  --fill: #000000;
  --fill-override: #ffffff;
  --fill-gray: #f5f5f7;
  --fill-blue: #0071e3;
  --fill-orange: #f56300;
  --fill-red: #ff3037;
  --fill-green: #03a10e;
  --fill-yellow: #ad8200;
  --fill-secondary: #161617;
  --fill-secondary-alt: #141414;
  --fill-secondary-alt-override: #fafafa;
  --fill-blue-secondary: #162b5b;
  --fill-gray-secondary: #6e6e73;
  --fill-gray-secondary-alt: #141414;
  --color-fill-green-secondary: #002b03;
  --color-fill-light-blue-secondary: #002a51;
  --color-fill-light-gray-secondary: #323232;
  --color-fill-orange-secondary: #290d00;
  --color-fill-purple-secondary: #190325;
  --color-fill-red-secondary: #300;
  --color-fill-teal-secondary: #002d2b;
  --color-fill-yellow-secondary: #2b2000;
  --fill-tertiary: #1d1d1f;
  --fill-tertiary-alt: #111;
  --fill-tertiary-override: #f5f5f7;
  --fill-blue-tertiary: #081021;
  --fill-gray-tertiary: #424245;
  --fill-gray-quaternary: #333336;
  --fill-gray-quinary: #222;
  --fill-blue-gradient-light: #0e3768;
  --fill-blue-gradient-dark: #07172a;
  --fill-gradient-gray-start: #161616;
  --fill-gradient-gray-end: #000000;
  --fill-table: #1d1d1f;
  --app-store-glyph-tile: #eeeeee;
  --app-store-fill-tile: #1f1f21;
  --toggle-color-background: #1d1d1f;
  --toggle-color-text: #0071e3;
  --color-button-background: #0071e3;
  --color-button-text: #ffffff;
  --color-figure-blue: #2997ff;
  --color-figure-gray: #f5f5f7;
  --color-figure-gray-secondary: #86868b;
  --color-figure-gray-secondary-alt: #a1a1a6;
  --color-figure-gray-tertiary: #6e6e73;
  --color-figure-green: #03a10e;
  --color-figure-light-blue: #7dc1ff;
  --color-figure-light-gray: #9a9a9e;
  --color-figure-orange: #f56300;
  --color-figure-pink: #f14bf1;
  --color-figure-purple: #a95ed2;
  --color-figure-red: #ff3037;
  --color-figure-teal: #00c2bb;
  --color-figure-yellow: #936d00;
  --color-highlight-green: #e4fee6;
  --color-highlight-red: #f8dddd;
  --color-tutorials-teal: #38a39c;
  --color-alert-deprecated: var(--color-figure-orange);
  --color-alert-deprecated-background: var(--color-fill-orange-secondary);
  --color-alert-deprecated-border: var(--color-figure-orange);
  --color-alert-important: var(--color-figure-purple);
  --color-alert-important-background: var(--color-fill-purple-secondary);
  --color-alert-important-border: var(--color-figure-purple);
  --color-alert-warning: var(--color-figure-yellow);
  --color-alert-warning-background: var(--color-fill-yellow-secondary);
  --color-alert-warning-border: var(--color-figure-yellow);
  --color-alert-note: var(--color-figure-light-gray);
  --color-alert-note-background: var(--color-fill-light-gray-secondary);
  --color-alert-note-border: var(--color-figure-light-gray);
  --color-alert-tip: var(--color-figure-teal);
  --color-alert-tip-background: var(--color-fill-teal-secondary);
  --color-alert-tip-border: var(--color-figure-teal);
  --color-alert-caution: var(--color-figure-red);
  --color-alert-caution-background: var(--color-fill-red-secondary);
  --color-alert-caution-border: var(--color-figure-red);

  /* Syntax Colors */
  --color-syntax-plain-text: #ffffff;
  --color-syntax-background: #333336;

  /* UI Variables */
  --foreground-color: var(--fill-override);
  --background-color: var(--fill);
  --background-secondary-color: var(--fill-secondary-alt);
  --background-tertiary-color: #1d1d1f;
  --label-primary-color: #fffffff9;
  --label-secondary-color: #ffffffc1;
  --label-tertiary-color: #ffffff7b;
  --separator-color: var(--fill-gray-tertiary);
  --separator-secondary-color: var(--fill-gray-quaternary);
  --link-color: var(--glyph-blue);
  --material-background-color: rgba(29, 29, 31, 0.72);
  --thick-material-background-color: rgba(29, 29, 31, 0.9);
  --material-separator-color: rgba(255, 255, 255, 0.24);
  --material-filters: saturate(180%) blur(20px);
}

#__next {
  display: contents;
}

main {
  background: linear-gradient(
    to bottom,
    var(--dark) 0%,
    var(--fill-gray-secondary-alt) 100%
  );
  min-height: calc(100vh - 473px);
}

@media only screen and (max-width: 1068px) {
  main {
    min-height: calc(100vh - 634px);
  }
}

main a {
  color: var(--glyph-blue);
}

================
File: styles/spacing.js
================
const spacingFactor = 8;

const getSpacingValue = (s) => {
  // if a number, it is a spacing unit so multiply it by the spacingFactor and append "px"
  if (typeof s === 'number') {
    return `${s * spacingFactor}px`;
  }

  // if true, use main content spacing
  if (typeof s === 'boolean' && s) {
    return `${3 * spacingFactor}px`;
  }

  // Most likely a string and is a px, em, rem unit already
  return s;
};

const getSpacing = (t, r, b, l) => {
  // single value
  if (
    (r === undefined || r === null || r === false) &&
    (b === undefined || b === null || b === false) &&
    (l === undefined || l === null || l === false)
  ) {
    return getSpacingValue(t);
  }

  // x, y pair
  if (
    (b === undefined || b === null || b === false) &&
    (l === undefined || l === null || l === false)
  ) {
    return `${getSpacingValue(t)} ${getSpacingValue(r)}`;
  }

  // top, left/right, bottom shorthand
  if (l === undefined || l === null || l === false) {
    return `${getSpacingValue(t)} ${getSpacingValue(r)}`;
  }

  // top, right, bottom, left
  return `${getSpacingValue(t)} ${getSpacingValue(r)} ${getSpacingValue(
    b
  )} ${getSpacingValue(l)}`;
};

export default getSpacing;

================
File: styles/theme.js
================
import { mediaQueries } from './breakpoints';
import getResponsivePropStyles from './getResponsivePropStyles';

const theme = {
  media: mediaQueries,
  getResponsivePropStyles,
};

export default theme;

================
File: utils/fetchData.js
================
import { fileExists, readFile, writeFile } from './file';
import path from 'path';

export const getCachePath = (id) => {
  const pathName = `./build/cache/${id}.json`;

  return path.resolve(process.cwd(), pathName);
};

export const fetchWithCache = async (id, req) => {
  const pathName = getCachePath(id);

  if (fileExists(pathName)) {
    const file = await readFile(pathName);

    return await file;
  } else {
    let res = await fetch(req);
    let result = await res.json();

    await writeFile(pathName, result);

    return result;
  }
};

export const fetchGitHubUser = async (username) => {
  const url = `https://api.github.com/users/${username}`;

  return await fetchWithCache(`github-users/${username}`, url);
};

================
File: utils/file.js
================
import fs from 'fs';
import path from 'path';

export const writeFile = async (pathName, data) => {
  const dataToWrite = JSON.stringify(data);

  await fs.mkdir(
    path.dirname(pathName),
    { recursive: true },
    async function (err) {
      await fs.writeFile(pathName, dataToWrite, (err) => {
        if (err) {
          console.error(err);
        }
      });
    }
  );
};

export const fileExists = (pathName) => {
  return fs.existsSync(pathName);
};

export const readFile = async (pathName) => {
  return new Promise((resolve, reject) => {
    fs.readFile(pathName, 'utf8', (error, data) => {
      if (error) {
        reject(error);
      }
      resolve(JSON.parse(data));
    });
  });
};

================
File: utils/getAllPosts.js
================
import matter from 'gray-matter';
import glob from 'glob';
import { fetchGitHubUser } from '@/utils/fetchData';

const getDate = (str) => new Date(str).toISOString();

const getAllPosts = async () => {
  const paths = glob.sync('data/blog/**/*.md');

  let posts = await Promise.all(
    paths.map(async (path) => {
      // Remove "data" from beginning of string and ".md" from end for URL
      const url = path.slice(4, -3);
      // retrieving the Markdown file associated to the slug
      // and reading its data
      const content = await import(`../${path}`);
      const data = matter(content.default);
      const frontmatter = data.data;
      // fetching authors user data from GitHub
      const author = frontmatter.author
        ? await fetchGitHubUser(frontmatter.author)
        : null;
      // extracting slug from path
      const pathComponents = path.split('/');
      const slug = pathComponents[pathComponents.length - 1];

      return {
        ...frontmatter,
        date: getDate(frontmatter.date),
        slug,
        url,
        path,
        author,
      };
    })
  );

  posts = posts
    .filter(({ draft }) => !draft)
    .sort((a, b) => (new Date(a.date) < new Date(b.date) ? 1 : -1));

  return posts;
};

export default getAllPosts;

================
File: utils/getMinimumSystemVersion.js
================
// utils/getMinimumSystemVersion.js

function getMinimumSystemVersion(str) {
  // If `str` is null or undefined, return null (or handle as you prefer).
  if (!str) {
    return null;
  }

  // Regex looks for something like: minimumSystemVersion=12.3
  const regex = /minimumSystemVersion=(\d+\.\d+)/;
  const match = str.match(regex);

  // If there's no match, return null; otherwise, return the version (e.g., "12.3")
  return match ? match[1] : null;
}

export default getMinimumSystemVersion;

================
File: .gitignore
================
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
yarn.lock

# Environment variables
.env
.env.local
.env.*.local

# Build outputs
dist/
build/
coverage/

# OS specific
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE specific
.idea/
.vscode/
*.swp
*.swo

node_modules

# Optional REPL history
.node_repl_history
.next

# Runtime data
pids
*.pid
*.

# Logs
logs
*.log
npm-debug.log*

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages

# Optional npm cache directory
.npm
.vercel

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
       "@/components/*": ["./components/*"],
       "@/data/*": ["./data/*"],
       "@/hooks/*": ["./hooks/*"],
       "@/styles/*": ["./styles/*"],
       "@/utils/*": ["./utils/*"],
       "@/assets/*": ["./assets/*"]
    }
  }
}

================
File: next.config.js
================
const path = require('path');
const webpack = require('webpack');

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'avatars.githubusercontent.com',
        port: '',
        pathname: '/*/**',
      },
      {
        protocol: 'https',
        hostname: 'github.com',
        port: '',
        pathname: '/*/**',
      },
      {
        protocol: 'https',
        hostname: 'www.apple.com',
        port: '',
        pathname: '/*/**',
      },
    ],
  },
  webpack: (config, options) => {
    // Add null-loader for binary and XML files
    config.module.rules.push({
      oneOf: [
        {
          test: /\.lockb$/,
          use: 'null-loader',
        },
        {
          test: /\.xml$/,
          use: 'null-loader',
        },
      ],
    });

    // Handle SVG files
    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });

    // Handle markdown files
    config.module.rules.push({
      test: /\.md$/,
      use: 'raw-loader',
    });

    // Configure webpack context for blog posts with limited recursion
    const blogPath = path.join(__dirname, 'data/blog');
    config.plugins.push(
      new webpack.ContextReplacementPlugin(
        /data\/blog/,
        blogPath,
        false, // Disable recursive lookups
        /\.md$/ // Match only .md files
      )
    );

    // Refine rule for public directory files
    config.module.rules.push({
      resourceQuery: /\/public\/.+$/,
      use: 'null-loader',
    });

    // Debugging: Print rules to ensure correct configuration
    if (options.isServer) {
      console.log('Webpack Rules:', config.module.rules);
    }

    return config;
  },
  experimental: {
    outputFileTracing: false, // Disable output file tracing to avoid recursion issues
  },
};

module.exports = {
  output: 'export'
}

================
File: package.json
================
{
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "postbuild": "NODE_OPTIONS='--experimental-json-modules' node ./scripts/generate-sitemap.mjs"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "^1.2.1",
    "@svgr/webpack": "^8.1.0",
    "globby": "^14.0.0",
    "gray-matter": "^4.0.3",
    "lodash": "^4.17.21",
    "next": "^14.0.4",
    "prettier": "^3.1.1",
    "prop-types": "^15.8.1",
    "raw-loader": "^4.0.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-feather": "^2.0.10",
    "react-markdown": "^9.0.1",
    "react-parallax": "^3.5.1",
    "react-popper": "^2.3.0",
    "react-syntax-highlighter": "^15.5.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "remark-github-alerts": "^0.0.4",
    "sharp": "^0.33.5",
    "styled-components": "^6.1.1",
    "unist-builder": "^4.0.0",
    "unist-util-visit": "^5.0.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "eslint": "^8.55.0",
    "eslint-config-next": "^14.0.4",
    "null-loader": "^4.0.1"
  },
  "engines": {
    "bun": "latest"
  }
}



================================================================
End of Codebase
================================================================
